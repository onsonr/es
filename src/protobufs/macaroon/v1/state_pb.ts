// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file macaroon/v1/state.proto (package macaroon.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message macaroon.v1.Grant
 */
export class Grant extends Message<Grant> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * @generated from field: string origin = 4;
   */
  origin = "";

  /**
   * @generated from field: int64 expiry_height = 5;
   */
  expiryHeight = protoInt64.zero;

  constructor(data?: PartialMessage<Grant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "macaroon.v1.Grant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "expiry_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Grant {
    return new Grant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Grant {
    return new Grant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Grant {
    return new Grant().fromJsonString(jsonString, options);
  }

  static equals(a: Grant | PlainMessage<Grant> | undefined, b: Grant | PlainMessage<Grant> | undefined): boolean {
    return proto3.util.equals(Grant, a, b);
  }
}

