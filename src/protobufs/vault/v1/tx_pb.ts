// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file vault/v1/tx.proto (package vault.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message vault.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: vault.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message vault.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgAllocateVault is the message type for the AllocateVault RPC.
 *
 * @generated from message vault.v1.MsgAllocateVault
 */
export class MsgAllocateVault extends Message<MsgAllocateVault> {
  /**
   * authority is the address of the service account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * subject is a unique human-defined identifier to associate with the vault.
   *
   * @generated from field: string subject = 2;
   */
  subject = "";

  /**
   * origin is the origin of the request in wildcard form.
   *
   * @generated from field: string origin = 3;
   */
  origin = "";

  constructor(data?: PartialMessage<MsgAllocateVault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.MsgAllocateVault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAllocateVault {
    return new MsgAllocateVault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAllocateVault {
    return new MsgAllocateVault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAllocateVault {
    return new MsgAllocateVault().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAllocateVault | PlainMessage<MsgAllocateVault> | undefined, b: MsgAllocateVault | PlainMessage<MsgAllocateVault> | undefined): boolean {
    return proto3.util.equals(MsgAllocateVault, a, b);
  }
}

/**
 * MsgAllocateVaultResponse is the response type for the AllocateVault RPC.
 *
 * @generated from message vault.v1.MsgAllocateVaultResponse
 */
export class MsgAllocateVaultResponse extends Message<MsgAllocateVaultResponse> {
  /**
   * CID is the content identifier of the vault.
   *
   * @generated from field: string cid = 1;
   */
  cid = "";

  /**
   * ExpiryBlock is the block number at which the vault will expire.
   *
   * @generated from field: int64 expiry_block = 2;
   */
  expiryBlock = protoInt64.zero;

  /**
   * RegistrationOptions is a json string of the
   * PublicKeyCredentialCreationOptions for WebAuthn
   *
   * @generated from field: string token = 3;
   */
  token = "";

  /**
   * IsLocalhost is a flag to indicate if the vault is localhost
   *
   * @generated from field: bool localhost = 4;
   */
  localhost = false;

  constructor(data?: PartialMessage<MsgAllocateVaultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vault.v1.MsgAllocateVaultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiry_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "localhost", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAllocateVaultResponse {
    return new MsgAllocateVaultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAllocateVaultResponse {
    return new MsgAllocateVaultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAllocateVaultResponse {
    return new MsgAllocateVaultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAllocateVaultResponse | PlainMessage<MsgAllocateVaultResponse> | undefined, b: MsgAllocateVaultResponse | PlainMessage<MsgAllocateVaultResponse> | undefined): boolean {
    return proto3.util.equals(MsgAllocateVaultResponse, a, b);
  }
}

