// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/peggy/v1/msgs.proto (package injective.peggy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { BridgeValidator } from "./types_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgSetOrchestratorAddresses
 * this message allows validators to delegate their voting responsibilities
 * to a given key. This key is then used as an optional authentication method
 * for sigining oracle claims
 * VALIDATOR
 * The validator field is a cosmosvaloper1... string (i.e. sdk.ValAddress)
 * that references a validator in the active set
 * ORCHESTRATOR
 * The orchestrator field is a cosmos1... string  (i.e. sdk.AccAddress) that
 * references the key that is being delegated to
 * ETH_ADDRESS
 * This is a hex encoded 0x Ethereum public key that will be used by this
 * validator on Ethereum
 *
 * @generated from message injective.peggy.v1.MsgSetOrchestratorAddresses
 */
export class MsgSetOrchestratorAddresses extends Message<MsgSetOrchestratorAddresses> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string orchestrator = 2;
   */
  orchestrator = "";

  /**
   * @generated from field: string eth_address = 3;
   */
  ethAddress = "";

  constructor(data?: PartialMessage<MsgSetOrchestratorAddresses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgSetOrchestratorAddresses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetOrchestratorAddresses {
    return new MsgSetOrchestratorAddresses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddresses {
    return new MsgSetOrchestratorAddresses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddresses {
    return new MsgSetOrchestratorAddresses().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetOrchestratorAddresses | PlainMessage<MsgSetOrchestratorAddresses> | undefined, b: MsgSetOrchestratorAddresses | PlainMessage<MsgSetOrchestratorAddresses> | undefined): boolean {
    return proto3.util.equals(MsgSetOrchestratorAddresses, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgSetOrchestratorAddressesResponse
 */
export class MsgSetOrchestratorAddressesResponse extends Message<MsgSetOrchestratorAddressesResponse> {
  constructor(data?: PartialMessage<MsgSetOrchestratorAddressesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgSetOrchestratorAddressesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetOrchestratorAddressesResponse {
    return new MsgSetOrchestratorAddressesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddressesResponse {
    return new MsgSetOrchestratorAddressesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetOrchestratorAddressesResponse {
    return new MsgSetOrchestratorAddressesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetOrchestratorAddressesResponse | PlainMessage<MsgSetOrchestratorAddressesResponse> | undefined, b: MsgSetOrchestratorAddressesResponse | PlainMessage<MsgSetOrchestratorAddressesResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetOrchestratorAddressesResponse, a, b);
  }
}

/**
 * MsgValsetConfirm
 * this is the message sent by the validators when they wish to submit their
 * signatures over the validator set at a given block height. A validator must
 * first call MsgSetEthAddress to set their Ethereum address to be used for
 * signing. Then someone (anyone) must make a ValsetRequest the request is
 * essentially a messaging mechanism to determine which block all validators
 * should submit signatures over. Finally validators sign the validator set,
 * powers, and Ethereum addresses of the entire validator set at the height of a
 * ValsetRequest and submit that signature with this message.
 *
 * If a sufficient number of validators (66% of voting power) (A) have set
 * Ethereum addresses and (B) submit ValsetConfirm messages with their
 * signatures it is then possible for anyone to view these signatures in the
 * chain store and submit them to Ethereum to update the validator set
 * -------------
 *
 * @generated from message injective.peggy.v1.MsgValsetConfirm
 */
export class MsgValsetConfirm extends Message<MsgValsetConfirm> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  /**
   * @generated from field: string orchestrator = 2;
   */
  orchestrator = "";

  /**
   * @generated from field: string eth_address = 3;
   */
  ethAddress = "";

  /**
   * @generated from field: string signature = 4;
   */
  signature = "";

  constructor(data?: PartialMessage<MsgValsetConfirm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgValsetConfirm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetConfirm {
    return new MsgValsetConfirm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetConfirm {
    return new MsgValsetConfirm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetConfirm {
    return new MsgValsetConfirm().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetConfirm | PlainMessage<MsgValsetConfirm> | undefined, b: MsgValsetConfirm | PlainMessage<MsgValsetConfirm> | undefined): boolean {
    return proto3.util.equals(MsgValsetConfirm, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgValsetConfirmResponse
 */
export class MsgValsetConfirmResponse extends Message<MsgValsetConfirmResponse> {
  constructor(data?: PartialMessage<MsgValsetConfirmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgValsetConfirmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetConfirmResponse {
    return new MsgValsetConfirmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetConfirmResponse {
    return new MsgValsetConfirmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetConfirmResponse {
    return new MsgValsetConfirmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetConfirmResponse | PlainMessage<MsgValsetConfirmResponse> | undefined, b: MsgValsetConfirmResponse | PlainMessage<MsgValsetConfirmResponse> | undefined): boolean {
    return proto3.util.equals(MsgValsetConfirmResponse, a, b);
  }
}

/**
 * MsgSendToEth
 * This is the message that a user calls when they want to bridge an asset
 * it will later be removed when it is included in a batch and successfully
 * submitted tokens are removed from the users balance immediately
 * -------------
 * AMOUNT:
 * the coin to send across the bridge, note the restriction that this is a
 * single coin not a set of coins that is normal in other Cosmos messages
 * FEE:
 * the fee paid for the bridge, distinct from the fee paid to the chain to
 * actually send this message in the first place. So a successful send has
 * two layers of fees for the user
 *
 * @generated from message injective.peggy.v1.MsgSendToEth
 */
export class MsgSendToEth extends Message<MsgSendToEth> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string eth_dest = 2;
   */
  ethDest = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin bridge_fee = 4;
   */
  bridgeFee?: Coin;

  constructor(data?: PartialMessage<MsgSendToEth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgSendToEth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "eth_dest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "bridge_fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendToEth {
    return new MsgSendToEth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendToEth {
    return new MsgSendToEth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendToEth {
    return new MsgSendToEth().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendToEth | PlainMessage<MsgSendToEth> | undefined, b: MsgSendToEth | PlainMessage<MsgSendToEth> | undefined): boolean {
    return proto3.util.equals(MsgSendToEth, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgSendToEthResponse
 */
export class MsgSendToEthResponse extends Message<MsgSendToEthResponse> {
  constructor(data?: PartialMessage<MsgSendToEthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgSendToEthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendToEthResponse {
    return new MsgSendToEthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendToEthResponse {
    return new MsgSendToEthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendToEthResponse {
    return new MsgSendToEthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendToEthResponse | PlainMessage<MsgSendToEthResponse> | undefined, b: MsgSendToEthResponse | PlainMessage<MsgSendToEthResponse> | undefined): boolean {
    return proto3.util.equals(MsgSendToEthResponse, a, b);
  }
}

/**
 * MsgRequestBatch
 * this is a message anyone can send that requests a batch of transactions to
 * send across the bridge be created for whatever block height this message is
 * included in. This acts as a coordination point, the handler for this message
 * looks at the AddToOutgoingPool tx's in the store and generates a batch, also
 * available in the store tied to this message. The validators then grab this
 * batch, sign it, submit the signatures with a MsgConfirmBatch before a relayer
 * can finally submit the batch
 * -------------
 *
 * @generated from message injective.peggy.v1.MsgRequestBatch
 */
export class MsgRequestBatch extends Message<MsgRequestBatch> {
  /**
   * @generated from field: string orchestrator = 1;
   */
  orchestrator = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgRequestBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgRequestBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRequestBatch {
    return new MsgRequestBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRequestBatch {
    return new MsgRequestBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRequestBatch {
    return new MsgRequestBatch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRequestBatch | PlainMessage<MsgRequestBatch> | undefined, b: MsgRequestBatch | PlainMessage<MsgRequestBatch> | undefined): boolean {
    return proto3.util.equals(MsgRequestBatch, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgRequestBatchResponse
 */
export class MsgRequestBatchResponse extends Message<MsgRequestBatchResponse> {
  constructor(data?: PartialMessage<MsgRequestBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgRequestBatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRequestBatchResponse {
    return new MsgRequestBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRequestBatchResponse {
    return new MsgRequestBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRequestBatchResponse {
    return new MsgRequestBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRequestBatchResponse | PlainMessage<MsgRequestBatchResponse> | undefined, b: MsgRequestBatchResponse | PlainMessage<MsgRequestBatchResponse> | undefined): boolean {
    return proto3.util.equals(MsgRequestBatchResponse, a, b);
  }
}

/**
 * MsgConfirmBatch
 * When validators observe a MsgRequestBatch they form a batch by ordering
 * transactions currently in the txqueue in order of highest to lowest fee,
 * cutting off when the batch either reaches a hardcoded maximum size (to be
 * decided, probably around 100) or when transactions stop being profitable
 * (TODO determine this without nondeterminism) This message includes the batch
 * as well as an Ethereum signature over this batch by the validator
 * -------------
 *
 * @generated from message injective.peggy.v1.MsgConfirmBatch
 */
export class MsgConfirmBatch extends Message<MsgConfirmBatch> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  /**
   * @generated from field: string token_contract = 2;
   */
  tokenContract = "";

  /**
   * @generated from field: string eth_signer = 3;
   */
  ethSigner = "";

  /**
   * @generated from field: string orchestrator = 4;
   */
  orchestrator = "";

  /**
   * @generated from field: string signature = 5;
   */
  signature = "";

  constructor(data?: PartialMessage<MsgConfirmBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgConfirmBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "eth_signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgConfirmBatch {
    return new MsgConfirmBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgConfirmBatch {
    return new MsgConfirmBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgConfirmBatch {
    return new MsgConfirmBatch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgConfirmBatch | PlainMessage<MsgConfirmBatch> | undefined, b: MsgConfirmBatch | PlainMessage<MsgConfirmBatch> | undefined): boolean {
    return proto3.util.equals(MsgConfirmBatch, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgConfirmBatchResponse
 */
export class MsgConfirmBatchResponse extends Message<MsgConfirmBatchResponse> {
  constructor(data?: PartialMessage<MsgConfirmBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgConfirmBatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgConfirmBatchResponse {
    return new MsgConfirmBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgConfirmBatchResponse {
    return new MsgConfirmBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgConfirmBatchResponse {
    return new MsgConfirmBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgConfirmBatchResponse | PlainMessage<MsgConfirmBatchResponse> | undefined, b: MsgConfirmBatchResponse | PlainMessage<MsgConfirmBatchResponse> | undefined): boolean {
    return proto3.util.equals(MsgConfirmBatchResponse, a, b);
  }
}

/**
 * EthereumBridgeDepositClaim
 * When more than 66% of the active validator set has
 * claimed to have seen the deposit enter the ethereum blockchain coins are
 * issued to the Cosmos address in question
 * -------------
 *
 * @generated from message injective.peggy.v1.MsgDepositClaim
 */
export class MsgDepositClaim extends Message<MsgDepositClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: string token_contract = 3;
   */
  tokenContract = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  /**
   * @generated from field: string ethereum_sender = 5;
   */
  ethereumSender = "";

  /**
   * @generated from field: string cosmos_receiver = 6;
   */
  cosmosReceiver = "";

  /**
   * @generated from field: string orchestrator = 7;
   */
  orchestrator = "";

  /**
   * @generated from field: string data = 8;
   */
  data = "";

  constructor(data?: PartialMessage<MsgDepositClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgDepositClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ethereum_sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "cosmos_receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDepositClaim {
    return new MsgDepositClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDepositClaim {
    return new MsgDepositClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDepositClaim {
    return new MsgDepositClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDepositClaim | PlainMessage<MsgDepositClaim> | undefined, b: MsgDepositClaim | PlainMessage<MsgDepositClaim> | undefined): boolean {
    return proto3.util.equals(MsgDepositClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgDepositClaimResponse
 */
export class MsgDepositClaimResponse extends Message<MsgDepositClaimResponse> {
  constructor(data?: PartialMessage<MsgDepositClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgDepositClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDepositClaimResponse {
    return new MsgDepositClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDepositClaimResponse {
    return new MsgDepositClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDepositClaimResponse {
    return new MsgDepositClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDepositClaimResponse | PlainMessage<MsgDepositClaimResponse> | undefined, b: MsgDepositClaimResponse | PlainMessage<MsgDepositClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgDepositClaimResponse, a, b);
  }
}

/**
 * WithdrawClaim claims that a batch of withdrawal
 * operations on the bridge contract was executed.
 *
 * @generated from message injective.peggy.v1.MsgWithdrawClaim
 */
export class MsgWithdrawClaim extends Message<MsgWithdrawClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: uint64 batch_nonce = 3;
   */
  batchNonce = protoInt64.zero;

  /**
   * @generated from field: string token_contract = 4;
   */
  tokenContract = "";

  /**
   * @generated from field: string orchestrator = 5;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgWithdrawClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgWithdrawClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawClaim {
    return new MsgWithdrawClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawClaim {
    return new MsgWithdrawClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawClaim {
    return new MsgWithdrawClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawClaim | PlainMessage<MsgWithdrawClaim> | undefined, b: MsgWithdrawClaim | PlainMessage<MsgWithdrawClaim> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgWithdrawClaimResponse
 */
export class MsgWithdrawClaimResponse extends Message<MsgWithdrawClaimResponse> {
  constructor(data?: PartialMessage<MsgWithdrawClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgWithdrawClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawClaimResponse {
    return new MsgWithdrawClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawClaimResponse {
    return new MsgWithdrawClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawClaimResponse {
    return new MsgWithdrawClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawClaimResponse | PlainMessage<MsgWithdrawClaimResponse> | undefined, b: MsgWithdrawClaimResponse | PlainMessage<MsgWithdrawClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawClaimResponse, a, b);
  }
}

/**
 * ERC20DeployedClaim allows the Cosmos module
 * to learn about an ERC20 that someone deployed
 * to represent a Cosmos asset
 *
 * @generated from message injective.peggy.v1.MsgERC20DeployedClaim
 */
export class MsgERC20DeployedClaim extends Message<MsgERC20DeployedClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: string cosmos_denom = 3;
   */
  cosmosDenom = "";

  /**
   * @generated from field: string token_contract = 4;
   */
  tokenContract = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string symbol = 6;
   */
  symbol = "";

  /**
   * @generated from field: uint64 decimals = 7;
   */
  decimals = protoInt64.zero;

  /**
   * @generated from field: string orchestrator = 8;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgERC20DeployedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgERC20DeployedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "cosmos_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "decimals", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgERC20DeployedClaim {
    return new MsgERC20DeployedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaim {
    return new MsgERC20DeployedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaim {
    return new MsgERC20DeployedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgERC20DeployedClaim | PlainMessage<MsgERC20DeployedClaim> | undefined, b: MsgERC20DeployedClaim | PlainMessage<MsgERC20DeployedClaim> | undefined): boolean {
    return proto3.util.equals(MsgERC20DeployedClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgERC20DeployedClaimResponse
 */
export class MsgERC20DeployedClaimResponse extends Message<MsgERC20DeployedClaimResponse> {
  constructor(data?: PartialMessage<MsgERC20DeployedClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgERC20DeployedClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgERC20DeployedClaimResponse {
    return new MsgERC20DeployedClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaimResponse {
    return new MsgERC20DeployedClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgERC20DeployedClaimResponse {
    return new MsgERC20DeployedClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgERC20DeployedClaimResponse | PlainMessage<MsgERC20DeployedClaimResponse> | undefined, b: MsgERC20DeployedClaimResponse | PlainMessage<MsgERC20DeployedClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgERC20DeployedClaimResponse, a, b);
  }
}

/**
 * This call allows the sender (and only the sender)
 * to cancel a given MsgSendToEth and recieve a refund
 * of the tokens
 *
 * @generated from message injective.peggy.v1.MsgCancelSendToEth
 */
export class MsgCancelSendToEth extends Message<MsgCancelSendToEth> {
  /**
   * @generated from field: uint64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgCancelSendToEth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgCancelSendToEth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelSendToEth {
    return new MsgCancelSendToEth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelSendToEth {
    return new MsgCancelSendToEth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelSendToEth {
    return new MsgCancelSendToEth().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelSendToEth | PlainMessage<MsgCancelSendToEth> | undefined, b: MsgCancelSendToEth | PlainMessage<MsgCancelSendToEth> | undefined): boolean {
    return proto3.util.equals(MsgCancelSendToEth, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgCancelSendToEthResponse
 */
export class MsgCancelSendToEthResponse extends Message<MsgCancelSendToEthResponse> {
  constructor(data?: PartialMessage<MsgCancelSendToEthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgCancelSendToEthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelSendToEthResponse {
    return new MsgCancelSendToEthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelSendToEthResponse {
    return new MsgCancelSendToEthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelSendToEthResponse {
    return new MsgCancelSendToEthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelSendToEthResponse | PlainMessage<MsgCancelSendToEthResponse> | undefined, b: MsgCancelSendToEthResponse | PlainMessage<MsgCancelSendToEthResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelSendToEthResponse, a, b);
  }
}

/**
 * This call allows anyone to submit evidence that a
 * validator has signed a valset, batch, or logic call that never
 * existed. Subject contains the batch, valset, or logic call.
 *
 * @generated from message injective.peggy.v1.MsgSubmitBadSignatureEvidence
 */
export class MsgSubmitBadSignatureEvidence extends Message<MsgSubmitBadSignatureEvidence> {
  /**
   * @generated from field: google.protobuf.Any subject = 1;
   */
  subject?: Any;

  /**
   * @generated from field: string signature = 2;
   */
  signature = "";

  /**
   * @generated from field: string sender = 3;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgSubmitBadSignatureEvidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgSubmitBadSignatureEvidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "message", T: Any },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitBadSignatureEvidence {
    return new MsgSubmitBadSignatureEvidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidence {
    return new MsgSubmitBadSignatureEvidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidence {
    return new MsgSubmitBadSignatureEvidence().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitBadSignatureEvidence | PlainMessage<MsgSubmitBadSignatureEvidence> | undefined, b: MsgSubmitBadSignatureEvidence | PlainMessage<MsgSubmitBadSignatureEvidence> | undefined): boolean {
    return proto3.util.equals(MsgSubmitBadSignatureEvidence, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgSubmitBadSignatureEvidenceResponse
 */
export class MsgSubmitBadSignatureEvidenceResponse extends Message<MsgSubmitBadSignatureEvidenceResponse> {
  constructor(data?: PartialMessage<MsgSubmitBadSignatureEvidenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgSubmitBadSignatureEvidenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitBadSignatureEvidenceResponse {
    return new MsgSubmitBadSignatureEvidenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidenceResponse {
    return new MsgSubmitBadSignatureEvidenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitBadSignatureEvidenceResponse {
    return new MsgSubmitBadSignatureEvidenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitBadSignatureEvidenceResponse | PlainMessage<MsgSubmitBadSignatureEvidenceResponse> | undefined, b: MsgSubmitBadSignatureEvidenceResponse | PlainMessage<MsgSubmitBadSignatureEvidenceResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubmitBadSignatureEvidenceResponse, a, b);
  }
}

/**
 * This informs the Cosmos module that a validator
 * set has been updated.
 *
 * @generated from message injective.peggy.v1.MsgValsetUpdatedClaim
 */
export class MsgValsetUpdatedClaim extends Message<MsgValsetUpdatedClaim> {
  /**
   * @generated from field: uint64 event_nonce = 1;
   */
  eventNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 valset_nonce = 2;
   */
  valsetNonce = protoInt64.zero;

  /**
   * @generated from field: uint64 block_height = 3;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: repeated injective.peggy.v1.BridgeValidator members = 4;
   */
  members: BridgeValidator[] = [];

  /**
   * @generated from field: string reward_amount = 5;
   */
  rewardAmount = "";

  /**
   * @generated from field: string reward_token = 6;
   */
  rewardToken = "";

  /**
   * @generated from field: string orchestrator = 7;
   */
  orchestrator = "";

  constructor(data?: PartialMessage<MsgValsetUpdatedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgValsetUpdatedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "members", kind: "message", T: BridgeValidator, repeated: true },
    { no: 5, name: "reward_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "reward_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "orchestrator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetUpdatedClaim {
    return new MsgValsetUpdatedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaim {
    return new MsgValsetUpdatedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaim {
    return new MsgValsetUpdatedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetUpdatedClaim | PlainMessage<MsgValsetUpdatedClaim> | undefined, b: MsgValsetUpdatedClaim | PlainMessage<MsgValsetUpdatedClaim> | undefined): boolean {
    return proto3.util.equals(MsgValsetUpdatedClaim, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgValsetUpdatedClaimResponse
 */
export class MsgValsetUpdatedClaimResponse extends Message<MsgValsetUpdatedClaimResponse> {
  constructor(data?: PartialMessage<MsgValsetUpdatedClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgValsetUpdatedClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgValsetUpdatedClaimResponse {
    return new MsgValsetUpdatedClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaimResponse {
    return new MsgValsetUpdatedClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgValsetUpdatedClaimResponse {
    return new MsgValsetUpdatedClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgValsetUpdatedClaimResponse | PlainMessage<MsgValsetUpdatedClaimResponse> | undefined, b: MsgValsetUpdatedClaimResponse | PlainMessage<MsgValsetUpdatedClaimResponse> | undefined): boolean {
    return proto3.util.equals(MsgValsetUpdatedClaimResponse, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the peggy parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: injective.peggy.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message injective.peggy.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgBlacklistEthereumAddresses defines the message used to add Ethereum
 * addresses to peggy blacklist.
 *
 * @generated from message injective.peggy.v1.MsgBlacklistEthereumAddresses
 */
export class MsgBlacklistEthereumAddresses extends Message<MsgBlacklistEthereumAddresses> {
  /**
   * signer address
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Ethereum addresses to include in the blacklist
   *
   * @generated from field: repeated string blacklist_addresses = 2;
   */
  blacklistAddresses: string[] = [];

  constructor(data?: PartialMessage<MsgBlacklistEthereumAddresses>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgBlacklistEthereumAddresses";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blacklist_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBlacklistEthereumAddresses {
    return new MsgBlacklistEthereumAddresses().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBlacklistEthereumAddresses {
    return new MsgBlacklistEthereumAddresses().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBlacklistEthereumAddresses {
    return new MsgBlacklistEthereumAddresses().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBlacklistEthereumAddresses | PlainMessage<MsgBlacklistEthereumAddresses> | undefined, b: MsgBlacklistEthereumAddresses | PlainMessage<MsgBlacklistEthereumAddresses> | undefined): boolean {
    return proto3.util.equals(MsgBlacklistEthereumAddresses, a, b);
  }
}

/**
 * MsgBlacklistEthereumAddressesResponse defines the
 * MsgBlacklistEthereumAddresses response type.
 *
 * @generated from message injective.peggy.v1.MsgBlacklistEthereumAddressesResponse
 */
export class MsgBlacklistEthereumAddressesResponse extends Message<MsgBlacklistEthereumAddressesResponse> {
  constructor(data?: PartialMessage<MsgBlacklistEthereumAddressesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgBlacklistEthereumAddressesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBlacklistEthereumAddressesResponse {
    return new MsgBlacklistEthereumAddressesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBlacklistEthereumAddressesResponse {
    return new MsgBlacklistEthereumAddressesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBlacklistEthereumAddressesResponse {
    return new MsgBlacklistEthereumAddressesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBlacklistEthereumAddressesResponse | PlainMessage<MsgBlacklistEthereumAddressesResponse> | undefined, b: MsgBlacklistEthereumAddressesResponse | PlainMessage<MsgBlacklistEthereumAddressesResponse> | undefined): boolean {
    return proto3.util.equals(MsgBlacklistEthereumAddressesResponse, a, b);
  }
}

/**
 * MsgRevokeEthereumBlacklist defines the message used to remove Ethereum
 * addresses from peggy blacklist.
 *
 * @generated from message injective.peggy.v1.MsgRevokeEthereumBlacklist
 */
export class MsgRevokeEthereumBlacklist extends Message<MsgRevokeEthereumBlacklist> {
  /**
   * signer address
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Ethereum addresses to include in the blacklist
   *
   * @generated from field: repeated string blacklist_addresses = 2;
   */
  blacklistAddresses: string[] = [];

  constructor(data?: PartialMessage<MsgRevokeEthereumBlacklist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgRevokeEthereumBlacklist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blacklist_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeEthereumBlacklist {
    return new MsgRevokeEthereumBlacklist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeEthereumBlacklist {
    return new MsgRevokeEthereumBlacklist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeEthereumBlacklist {
    return new MsgRevokeEthereumBlacklist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeEthereumBlacklist | PlainMessage<MsgRevokeEthereumBlacklist> | undefined, b: MsgRevokeEthereumBlacklist | PlainMessage<MsgRevokeEthereumBlacklist> | undefined): boolean {
    return proto3.util.equals(MsgRevokeEthereumBlacklist, a, b);
  }
}

/**
 * MsgRevokeEthereumBlacklistResponse defines the MsgRevokeEthereumBlacklist
 * response type.
 *
 * @generated from message injective.peggy.v1.MsgRevokeEthereumBlacklistResponse
 */
export class MsgRevokeEthereumBlacklistResponse extends Message<MsgRevokeEthereumBlacklistResponse> {
  constructor(data?: PartialMessage<MsgRevokeEthereumBlacklistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.peggy.v1.MsgRevokeEthereumBlacklistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeEthereumBlacklistResponse {
    return new MsgRevokeEthereumBlacklistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeEthereumBlacklistResponse {
    return new MsgRevokeEthereumBlacklistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeEthereumBlacklistResponse {
    return new MsgRevokeEthereumBlacklistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeEthereumBlacklistResponse | PlainMessage<MsgRevokeEthereumBlacklistResponse> | undefined, b: MsgRevokeEthereumBlacklistResponse | PlainMessage<MsgRevokeEthereumBlacklistResponse> | undefined): boolean {
    return proto3.util.equals(MsgRevokeEthereumBlacklistResponse, a, b);
  }
}

