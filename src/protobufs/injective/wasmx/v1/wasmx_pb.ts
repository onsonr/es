// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/wasmx/v1/wasmx.proto (package injective.wasmx.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccessConfig } from "../../../cosmwasm/wasm/v1/types_pb.js";
import { FundingMode } from "./proposal_pb.js";

/**
 * @generated from message injective.wasmx.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * Set the status to active to indicate that contracts can be executed in
   * begin blocker.
   *
   * @generated from field: bool is_execution_enabled = 1;
   */
  isExecutionEnabled = false;

  /**
   * Maximum aggregate total gas to be used for the contract executions in the
   * BeginBlocker.
   *
   * @generated from field: uint64 max_begin_block_total_gas = 2;
   */
  maxBeginBlockTotalGas = protoInt64.zero;

  /**
   * the maximum gas limit each individual contract can consume in the
   * BeginBlocker.
   *
   * @generated from field: uint64 max_contract_gas_limit = 3;
   */
  maxContractGasLimit = protoInt64.zero;

  /**
   * min_gas_price defines the minimum gas price the contracts must pay to be
   * executed in the BeginBlocker.
   *
   * @generated from field: uint64 min_gas_price = 4;
   */
  minGasPrice = protoInt64.zero;

  /**
   * @generated from field: cosmwasm.wasm.v1.AccessConfig register_contract_access = 5;
   */
  registerContractAccess?: AccessConfig;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_execution_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "max_begin_block_total_gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "max_contract_gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "min_gas_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "register_contract_access", kind: "message", T: AccessConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message injective.wasmx.v1.RegisteredContract
 */
export class RegisteredContract extends Message<RegisteredContract> {
  /**
   * limit of gas per BB execution
   *
   * @generated from field: uint64 gas_limit = 1;
   */
  gasLimit = protoInt64.zero;

  /**
   * gas price that contract is willing to pay for execution in BeginBlocker
   *
   * @generated from field: uint64 gas_price = 2;
   */
  gasPrice = protoInt64.zero;

  /**
   * is contract currently active
   *
   * @generated from field: bool is_executable = 3;
   */
  isExecutable = false;

  /**
   * code_id that is allowed to be executed (to prevent malicious updates) - if
   * nil/0 any code_id can be executed
   *
   * @generated from field: uint64 code_id = 4;
   */
  codeId = protoInt64.zero;

  /**
   * optional - admin addr that is allowed to update contract data
   *
   * @generated from field: string admin_address = 5;
   */
  adminAddress = "";

  /**
   * Optional: address of the contract granting fee
   * Must be set if fund_mode is GrantOnly
   *
   * @generated from field: string granter_address = 6;
   */
  granterAddress = "";

  /**
   * funding mode
   *
   * @generated from field: injective.wasmx.v1.FundingMode fund_mode = 7;
   */
  fundMode = FundingMode.Unspecified;

  constructor(data?: PartialMessage<RegisteredContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.wasmx.v1.RegisteredContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "gas_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "is_executable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "admin_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "granter_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "fund_mode", kind: "enum", T: proto3.getEnumType(FundingMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisteredContract {
    return new RegisteredContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisteredContract {
    return new RegisteredContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisteredContract {
    return new RegisteredContract().fromJsonString(jsonString, options);
  }

  static equals(a: RegisteredContract | PlainMessage<RegisteredContract> | undefined, b: RegisteredContract | PlainMessage<RegisteredContract> | undefined): boolean {
    return proto3.util.equals(RegisteredContract, a, b);
  }
}

