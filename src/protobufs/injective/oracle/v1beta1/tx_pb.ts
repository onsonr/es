// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/oracle/v1beta1/tx.proto (package injective.oracle.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AssetPair, Params, PriceAttestation } from "./oracle_pb.js";

/**
 * MsgRelayProviderPrice defines a SDK message for setting a price through the
 * provider oracle.
 *
 * @generated from message injective.oracle.v1beta1.MsgRelayProviderPrices
 */
export class MsgRelayProviderPrices extends Message<MsgRelayProviderPrices> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string provider = 2;
   */
  provider = "";

  /**
   * @generated from field: repeated string symbols = 3;
   */
  symbols: string[] = [];

  /**
   * @generated from field: repeated string prices = 4;
   */
  prices: string[] = [];

  constructor(data?: PartialMessage<MsgRelayProviderPrices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayProviderPrices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "prices", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayProviderPrices {
    return new MsgRelayProviderPrices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayProviderPrices {
    return new MsgRelayProviderPrices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayProviderPrices {
    return new MsgRelayProviderPrices().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayProviderPrices | PlainMessage<MsgRelayProviderPrices> | undefined, b: MsgRelayProviderPrices | PlainMessage<MsgRelayProviderPrices> | undefined): boolean {
    return proto3.util.equals(MsgRelayProviderPrices, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgRelayProviderPricesResponse
 */
export class MsgRelayProviderPricesResponse extends Message<MsgRelayProviderPricesResponse> {
  constructor(data?: PartialMessage<MsgRelayProviderPricesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayProviderPricesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayProviderPricesResponse {
    return new MsgRelayProviderPricesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayProviderPricesResponse {
    return new MsgRelayProviderPricesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayProviderPricesResponse {
    return new MsgRelayProviderPricesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayProviderPricesResponse | PlainMessage<MsgRelayProviderPricesResponse> | undefined, b: MsgRelayProviderPricesResponse | PlainMessage<MsgRelayProviderPricesResponse> | undefined): boolean {
    return proto3.util.equals(MsgRelayProviderPricesResponse, a, b);
  }
}

/**
 * MsgRelayPriceFeedPrice defines a SDK message for setting a price through the
 * pricefeed oracle.
 *
 * @generated from message injective.oracle.v1beta1.MsgRelayPriceFeedPrice
 */
export class MsgRelayPriceFeedPrice extends Message<MsgRelayPriceFeedPrice> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated string base = 2;
   */
  base: string[] = [];

  /**
   * @generated from field: repeated string quote = 3;
   */
  quote: string[] = [];

  /**
   * price defines the price of the oracle base and quote
   *
   * @generated from field: repeated string price = 4;
   */
  price: string[] = [];

  constructor(data?: PartialMessage<MsgRelayPriceFeedPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayPriceFeedPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayPriceFeedPrice {
    return new MsgRelayPriceFeedPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayPriceFeedPrice {
    return new MsgRelayPriceFeedPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayPriceFeedPrice {
    return new MsgRelayPriceFeedPrice().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayPriceFeedPrice | PlainMessage<MsgRelayPriceFeedPrice> | undefined, b: MsgRelayPriceFeedPrice | PlainMessage<MsgRelayPriceFeedPrice> | undefined): boolean {
    return proto3.util.equals(MsgRelayPriceFeedPrice, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgRelayPriceFeedPriceResponse
 */
export class MsgRelayPriceFeedPriceResponse extends Message<MsgRelayPriceFeedPriceResponse> {
  constructor(data?: PartialMessage<MsgRelayPriceFeedPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayPriceFeedPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayPriceFeedPriceResponse {
    return new MsgRelayPriceFeedPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayPriceFeedPriceResponse {
    return new MsgRelayPriceFeedPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayPriceFeedPriceResponse {
    return new MsgRelayPriceFeedPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayPriceFeedPriceResponse | PlainMessage<MsgRelayPriceFeedPriceResponse> | undefined, b: MsgRelayPriceFeedPriceResponse | PlainMessage<MsgRelayPriceFeedPriceResponse> | undefined): boolean {
    return proto3.util.equals(MsgRelayPriceFeedPriceResponse, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgRelayBandRates
 */
export class MsgRelayBandRates extends Message<MsgRelayBandRates> {
  /**
   * @generated from field: string relayer = 1;
   */
  relayer = "";

  /**
   * @generated from field: repeated string symbols = 2;
   */
  symbols: string[] = [];

  /**
   * @generated from field: repeated uint64 rates = 3;
   */
  rates: bigint[] = [];

  /**
   * @generated from field: repeated uint64 resolve_times = 4;
   */
  resolveTimes: bigint[] = [];

  /**
   * @generated from field: repeated uint64 requestIDs = 5;
   */
  requestIDs: bigint[] = [];

  constructor(data?: PartialMessage<MsgRelayBandRates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayBandRates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "rates", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 4, name: "resolve_times", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 5, name: "requestIDs", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayBandRates {
    return new MsgRelayBandRates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayBandRates {
    return new MsgRelayBandRates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayBandRates {
    return new MsgRelayBandRates().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayBandRates | PlainMessage<MsgRelayBandRates> | undefined, b: MsgRelayBandRates | PlainMessage<MsgRelayBandRates> | undefined): boolean {
    return proto3.util.equals(MsgRelayBandRates, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgRelayBandRatesResponse
 */
export class MsgRelayBandRatesResponse extends Message<MsgRelayBandRatesResponse> {
  constructor(data?: PartialMessage<MsgRelayBandRatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayBandRatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayBandRatesResponse {
    return new MsgRelayBandRatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayBandRatesResponse {
    return new MsgRelayBandRatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayBandRatesResponse {
    return new MsgRelayBandRatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayBandRatesResponse | PlainMessage<MsgRelayBandRatesResponse> | undefined, b: MsgRelayBandRatesResponse | PlainMessage<MsgRelayBandRatesResponse> | undefined): boolean {
    return proto3.util.equals(MsgRelayBandRatesResponse, a, b);
  }
}

/**
 * MsgRelayCoinbaseMessages defines a SDK message for relaying price messages
 * from Coinbase API.
 *
 * @generated from message injective.oracle.v1beta1.MsgRelayCoinbaseMessages
 */
export class MsgRelayCoinbaseMessages extends Message<MsgRelayCoinbaseMessages> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated bytes messages = 2;
   */
  messages: Uint8Array[] = [];

  /**
   * @generated from field: repeated bytes signatures = 3;
   */
  signatures: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgRelayCoinbaseMessages>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayCoinbaseMessages";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messages", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "signatures", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayCoinbaseMessages {
    return new MsgRelayCoinbaseMessages().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayCoinbaseMessages {
    return new MsgRelayCoinbaseMessages().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayCoinbaseMessages {
    return new MsgRelayCoinbaseMessages().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayCoinbaseMessages | PlainMessage<MsgRelayCoinbaseMessages> | undefined, b: MsgRelayCoinbaseMessages | PlainMessage<MsgRelayCoinbaseMessages> | undefined): boolean {
    return proto3.util.equals(MsgRelayCoinbaseMessages, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgRelayCoinbaseMessagesResponse
 */
export class MsgRelayCoinbaseMessagesResponse extends Message<MsgRelayCoinbaseMessagesResponse> {
  constructor(data?: PartialMessage<MsgRelayCoinbaseMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayCoinbaseMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayCoinbaseMessagesResponse {
    return new MsgRelayCoinbaseMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayCoinbaseMessagesResponse {
    return new MsgRelayCoinbaseMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayCoinbaseMessagesResponse {
    return new MsgRelayCoinbaseMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayCoinbaseMessagesResponse | PlainMessage<MsgRelayCoinbaseMessagesResponse> | undefined, b: MsgRelayCoinbaseMessagesResponse | PlainMessage<MsgRelayCoinbaseMessagesResponse> | undefined): boolean {
    return proto3.util.equals(MsgRelayCoinbaseMessagesResponse, a, b);
  }
}

/**
 * MsgRelayStorkPrices defines a SDK message for relaying price message
 * from Stork API.
 *
 * @generated from message injective.oracle.v1beta1.MsgRelayStorkPrices
 */
export class MsgRelayStorkPrices extends Message<MsgRelayStorkPrices> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.oracle.v1beta1.AssetPair asset_pairs = 2;
   */
  assetPairs: AssetPair[] = [];

  constructor(data?: PartialMessage<MsgRelayStorkPrices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayStorkPrices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_pairs", kind: "message", T: AssetPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayStorkPrices {
    return new MsgRelayStorkPrices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayStorkPrices {
    return new MsgRelayStorkPrices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayStorkPrices {
    return new MsgRelayStorkPrices().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayStorkPrices | PlainMessage<MsgRelayStorkPrices> | undefined, b: MsgRelayStorkPrices | PlainMessage<MsgRelayStorkPrices> | undefined): boolean {
    return proto3.util.equals(MsgRelayStorkPrices, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgRelayStorkPricesResponse
 */
export class MsgRelayStorkPricesResponse extends Message<MsgRelayStorkPricesResponse> {
  constructor(data?: PartialMessage<MsgRelayStorkPricesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayStorkPricesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayStorkPricesResponse {
    return new MsgRelayStorkPricesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayStorkPricesResponse {
    return new MsgRelayStorkPricesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayStorkPricesResponse {
    return new MsgRelayStorkPricesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayStorkPricesResponse | PlainMessage<MsgRelayStorkPricesResponse> | undefined, b: MsgRelayStorkPricesResponse | PlainMessage<MsgRelayStorkPricesResponse> | undefined): boolean {
    return proto3.util.equals(MsgRelayStorkPricesResponse, a, b);
  }
}

/**
 * MsgRequestBandIBCRates defines a SDK message for requesting data from
 * BandChain using IBC.
 *
 * @generated from message injective.oracle.v1beta1.MsgRequestBandIBCRates
 */
export class MsgRequestBandIBCRates extends Message<MsgRequestBandIBCRates> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 request_id = 2;
   */
  requestId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgRequestBandIBCRates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRequestBandIBCRates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRequestBandIBCRates {
    return new MsgRequestBandIBCRates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRequestBandIBCRates {
    return new MsgRequestBandIBCRates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRequestBandIBCRates {
    return new MsgRequestBandIBCRates().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRequestBandIBCRates | PlainMessage<MsgRequestBandIBCRates> | undefined, b: MsgRequestBandIBCRates | PlainMessage<MsgRequestBandIBCRates> | undefined): boolean {
    return proto3.util.equals(MsgRequestBandIBCRates, a, b);
  }
}

/**
 * MsgRequestDataResponse defines the Msg/RequestBandIBCRates response type.
 *
 * @generated from message injective.oracle.v1beta1.MsgRequestBandIBCRatesResponse
 */
export class MsgRequestBandIBCRatesResponse extends Message<MsgRequestBandIBCRatesResponse> {
  constructor(data?: PartialMessage<MsgRequestBandIBCRatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRequestBandIBCRatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRequestBandIBCRatesResponse {
    return new MsgRequestBandIBCRatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRequestBandIBCRatesResponse {
    return new MsgRequestBandIBCRatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRequestBandIBCRatesResponse {
    return new MsgRequestBandIBCRatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRequestBandIBCRatesResponse | PlainMessage<MsgRequestBandIBCRatesResponse> | undefined, b: MsgRequestBandIBCRatesResponse | PlainMessage<MsgRequestBandIBCRatesResponse> | undefined): boolean {
    return proto3.util.equals(MsgRequestBandIBCRatesResponse, a, b);
  }
}

/**
 * MsgRelayPythPrices defines a SDK message for updating Pyth prices
 *
 * @generated from message injective.oracle.v1beta1.MsgRelayPythPrices
 */
export class MsgRelayPythPrices extends Message<MsgRelayPythPrices> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.oracle.v1beta1.PriceAttestation price_attestations = 2;
   */
  priceAttestations: PriceAttestation[] = [];

  constructor(data?: PartialMessage<MsgRelayPythPrices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayPythPrices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price_attestations", kind: "message", T: PriceAttestation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayPythPrices {
    return new MsgRelayPythPrices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayPythPrices {
    return new MsgRelayPythPrices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayPythPrices {
    return new MsgRelayPythPrices().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayPythPrices | PlainMessage<MsgRelayPythPrices> | undefined, b: MsgRelayPythPrices | PlainMessage<MsgRelayPythPrices> | undefined): boolean {
    return proto3.util.equals(MsgRelayPythPrices, a, b);
  }
}

/**
 * MsgRelayPythPricesResponse defines the Msg/RelayPythPrices response type.
 *
 * @generated from message injective.oracle.v1beta1.MsgRelayPythPricesResponse
 */
export class MsgRelayPythPricesResponse extends Message<MsgRelayPythPricesResponse> {
  constructor(data?: PartialMessage<MsgRelayPythPricesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgRelayPythPricesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRelayPythPricesResponse {
    return new MsgRelayPythPricesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRelayPythPricesResponse {
    return new MsgRelayPythPricesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRelayPythPricesResponse {
    return new MsgRelayPythPricesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRelayPythPricesResponse | PlainMessage<MsgRelayPythPricesResponse> | undefined, b: MsgRelayPythPricesResponse | PlainMessage<MsgRelayPythPricesResponse> | undefined): boolean {
    return proto3.util.equals(MsgRelayPythPricesResponse, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the oracle parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: injective.oracle.v1beta1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

