// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/oracle/v1beta1/query.proto (package injective.oracle.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BandPriceState, CoinbasePriceState, MetadataStatistics, OracleInfo, OracleType, Params, PriceFeedState, PriceRecord, PriceRecords, PriceState, ProviderInfo, ProviderState, PythPriceState, StorkPriceState } from "./oracle_pb.js";
import { GenesisState } from "./genesis_pb.js";

/**
 * @generated from message injective.oracle.v1beta1.QueryPythPriceRequest
 */
export class QueryPythPriceRequest extends Message<QueryPythPriceRequest> {
  /**
   * @generated from field: string price_id = 1;
   */
  priceId = "";

  constructor(data?: PartialMessage<QueryPythPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryPythPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPythPriceRequest {
    return new QueryPythPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPythPriceRequest {
    return new QueryPythPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPythPriceRequest {
    return new QueryPythPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPythPriceRequest | PlainMessage<QueryPythPriceRequest> | undefined, b: QueryPythPriceRequest | PlainMessage<QueryPythPriceRequest> | undefined): boolean {
    return proto3.util.equals(QueryPythPriceRequest, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.QueryPythPriceResponse
 */
export class QueryPythPriceResponse extends Message<QueryPythPriceResponse> {
  /**
   * @generated from field: injective.oracle.v1beta1.PythPriceState price_state = 1;
   */
  priceState?: PythPriceState;

  constructor(data?: PartialMessage<QueryPythPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryPythPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_state", kind: "message", T: PythPriceState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPythPriceResponse {
    return new QueryPythPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPythPriceResponse {
    return new QueryPythPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPythPriceResponse {
    return new QueryPythPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPythPriceResponse | PlainMessage<QueryPythPriceResponse> | undefined, b: QueryPythPriceResponse | PlainMessage<QueryPythPriceResponse> | undefined): boolean {
    return proto3.util.equals(QueryPythPriceResponse, a, b);
  }
}

/**
 * QueryOracleParamsRequest is the request type for the Query/OracleParams RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryOracleParamsResponse is the response type for the Query/OracleParams RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: injective.oracle.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryBandRelayersRequest is the request type for the Query/BandRelayers RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandRelayersRequest
 */
export class QueryBandRelayersRequest extends Message<QueryBandRelayersRequest> {
  constructor(data?: PartialMessage<QueryBandRelayersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryBandRelayersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBandRelayersRequest {
    return new QueryBandRelayersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBandRelayersRequest {
    return new QueryBandRelayersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBandRelayersRequest {
    return new QueryBandRelayersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBandRelayersRequest | PlainMessage<QueryBandRelayersRequest> | undefined, b: QueryBandRelayersRequest | PlainMessage<QueryBandRelayersRequest> | undefined): boolean {
    return proto3.util.equals(QueryBandRelayersRequest, a, b);
  }
}

/**
 * QueryBandRelayersResponse is the response type for the Query/BandRelayers RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandRelayersResponse
 */
export class QueryBandRelayersResponse extends Message<QueryBandRelayersResponse> {
  /**
   * @generated from field: repeated string relayers = 1;
   */
  relayers: string[] = [];

  constructor(data?: PartialMessage<QueryBandRelayersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryBandRelayersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relayers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBandRelayersResponse {
    return new QueryBandRelayersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBandRelayersResponse {
    return new QueryBandRelayersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBandRelayersResponse {
    return new QueryBandRelayersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBandRelayersResponse | PlainMessage<QueryBandRelayersResponse> | undefined, b: QueryBandRelayersResponse | PlainMessage<QueryBandRelayersResponse> | undefined): boolean {
    return proto3.util.equals(QueryBandRelayersResponse, a, b);
  }
}

/**
 * QueryBandPriceStatesRequest is the request type for the Query/BandPriceStates
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandPriceStatesRequest
 */
export class QueryBandPriceStatesRequest extends Message<QueryBandPriceStatesRequest> {
  constructor(data?: PartialMessage<QueryBandPriceStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryBandPriceStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBandPriceStatesRequest {
    return new QueryBandPriceStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBandPriceStatesRequest {
    return new QueryBandPriceStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBandPriceStatesRequest {
    return new QueryBandPriceStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBandPriceStatesRequest | PlainMessage<QueryBandPriceStatesRequest> | undefined, b: QueryBandPriceStatesRequest | PlainMessage<QueryBandPriceStatesRequest> | undefined): boolean {
    return proto3.util.equals(QueryBandPriceStatesRequest, a, b);
  }
}

/**
 * QueryBandPriceStatesResponse is the response type for the
 * Query/BandPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandPriceStatesResponse
 */
export class QueryBandPriceStatesResponse extends Message<QueryBandPriceStatesResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.BandPriceState price_states = 1;
   */
  priceStates: BandPriceState[] = [];

  constructor(data?: PartialMessage<QueryBandPriceStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryBandPriceStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: BandPriceState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBandPriceStatesResponse {
    return new QueryBandPriceStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBandPriceStatesResponse {
    return new QueryBandPriceStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBandPriceStatesResponse {
    return new QueryBandPriceStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBandPriceStatesResponse | PlainMessage<QueryBandPriceStatesResponse> | undefined, b: QueryBandPriceStatesResponse | PlainMessage<QueryBandPriceStatesResponse> | undefined): boolean {
    return proto3.util.equals(QueryBandPriceStatesResponse, a, b);
  }
}

/**
 * QueryBandIBCPriceStatesRequest is the request type for the
 * Query/BandIBCPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest
 */
export class QueryBandIBCPriceStatesRequest extends Message<QueryBandIBCPriceStatesRequest> {
  constructor(data?: PartialMessage<QueryBandIBCPriceStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBandIBCPriceStatesRequest {
    return new QueryBandIBCPriceStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBandIBCPriceStatesRequest {
    return new QueryBandIBCPriceStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBandIBCPriceStatesRequest {
    return new QueryBandIBCPriceStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBandIBCPriceStatesRequest | PlainMessage<QueryBandIBCPriceStatesRequest> | undefined, b: QueryBandIBCPriceStatesRequest | PlainMessage<QueryBandIBCPriceStatesRequest> | undefined): boolean {
    return proto3.util.equals(QueryBandIBCPriceStatesRequest, a, b);
  }
}

/**
 * QueryBandIBCPriceStatesResponse is the response type for the
 * Query/BandIBCPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse
 */
export class QueryBandIBCPriceStatesResponse extends Message<QueryBandIBCPriceStatesResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.BandPriceState price_states = 1;
   */
  priceStates: BandPriceState[] = [];

  constructor(data?: PartialMessage<QueryBandIBCPriceStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: BandPriceState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBandIBCPriceStatesResponse {
    return new QueryBandIBCPriceStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBandIBCPriceStatesResponse {
    return new QueryBandIBCPriceStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBandIBCPriceStatesResponse {
    return new QueryBandIBCPriceStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBandIBCPriceStatesResponse | PlainMessage<QueryBandIBCPriceStatesResponse> | undefined, b: QueryBandIBCPriceStatesResponse | PlainMessage<QueryBandIBCPriceStatesResponse> | undefined): boolean {
    return proto3.util.equals(QueryBandIBCPriceStatesResponse, a, b);
  }
}

/**
 * QueryPriceFeedPriceStatesRequest is the request type for the
 * Query/PriceFeedPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest
 */
export class QueryPriceFeedPriceStatesRequest extends Message<QueryPriceFeedPriceStatesRequest> {
  constructor(data?: PartialMessage<QueryPriceFeedPriceStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPriceFeedPriceStatesRequest {
    return new QueryPriceFeedPriceStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPriceFeedPriceStatesRequest {
    return new QueryPriceFeedPriceStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPriceFeedPriceStatesRequest {
    return new QueryPriceFeedPriceStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPriceFeedPriceStatesRequest | PlainMessage<QueryPriceFeedPriceStatesRequest> | undefined, b: QueryPriceFeedPriceStatesRequest | PlainMessage<QueryPriceFeedPriceStatesRequest> | undefined): boolean {
    return proto3.util.equals(QueryPriceFeedPriceStatesRequest, a, b);
  }
}

/**
 * QueryPriceFeedPriceStatesResponse is the response type for the
 * Query/PriceFeedPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse
 */
export class QueryPriceFeedPriceStatesResponse extends Message<QueryPriceFeedPriceStatesResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.PriceFeedState price_states = 1;
   */
  priceStates: PriceFeedState[] = [];

  constructor(data?: PartialMessage<QueryPriceFeedPriceStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: PriceFeedState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPriceFeedPriceStatesResponse {
    return new QueryPriceFeedPriceStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPriceFeedPriceStatesResponse {
    return new QueryPriceFeedPriceStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPriceFeedPriceStatesResponse {
    return new QueryPriceFeedPriceStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPriceFeedPriceStatesResponse | PlainMessage<QueryPriceFeedPriceStatesResponse> | undefined, b: QueryPriceFeedPriceStatesResponse | PlainMessage<QueryPriceFeedPriceStatesResponse> | undefined): boolean {
    return proto3.util.equals(QueryPriceFeedPriceStatesResponse, a, b);
  }
}

/**
 * QueryCoinbasePriceStatesRequest is the request type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest
 */
export class QueryCoinbasePriceStatesRequest extends Message<QueryCoinbasePriceStatesRequest> {
  constructor(data?: PartialMessage<QueryCoinbasePriceStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCoinbasePriceStatesRequest {
    return new QueryCoinbasePriceStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCoinbasePriceStatesRequest {
    return new QueryCoinbasePriceStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCoinbasePriceStatesRequest {
    return new QueryCoinbasePriceStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCoinbasePriceStatesRequest | PlainMessage<QueryCoinbasePriceStatesRequest> | undefined, b: QueryCoinbasePriceStatesRequest | PlainMessage<QueryCoinbasePriceStatesRequest> | undefined): boolean {
    return proto3.util.equals(QueryCoinbasePriceStatesRequest, a, b);
  }
}

/**
 * QueryCoinbasePriceStatesResponse is the response type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse
 */
export class QueryCoinbasePriceStatesResponse extends Message<QueryCoinbasePriceStatesResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.CoinbasePriceState price_states = 1;
   */
  priceStates: CoinbasePriceState[] = [];

  constructor(data?: PartialMessage<QueryCoinbasePriceStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: CoinbasePriceState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCoinbasePriceStatesResponse {
    return new QueryCoinbasePriceStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCoinbasePriceStatesResponse {
    return new QueryCoinbasePriceStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCoinbasePriceStatesResponse {
    return new QueryCoinbasePriceStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCoinbasePriceStatesResponse | PlainMessage<QueryCoinbasePriceStatesResponse> | undefined, b: QueryCoinbasePriceStatesResponse | PlainMessage<QueryCoinbasePriceStatesResponse> | undefined): boolean {
    return proto3.util.equals(QueryCoinbasePriceStatesResponse, a, b);
  }
}

/**
 * QueryPythPriceStatesRequest is the request type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPythPriceStatesRequest
 */
export class QueryPythPriceStatesRequest extends Message<QueryPythPriceStatesRequest> {
  constructor(data?: PartialMessage<QueryPythPriceStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryPythPriceStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPythPriceStatesRequest {
    return new QueryPythPriceStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPythPriceStatesRequest {
    return new QueryPythPriceStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPythPriceStatesRequest {
    return new QueryPythPriceStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPythPriceStatesRequest | PlainMessage<QueryPythPriceStatesRequest> | undefined, b: QueryPythPriceStatesRequest | PlainMessage<QueryPythPriceStatesRequest> | undefined): boolean {
    return proto3.util.equals(QueryPythPriceStatesRequest, a, b);
  }
}

/**
 * QueryPythPriceStatesResponse is the response type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPythPriceStatesResponse
 */
export class QueryPythPriceStatesResponse extends Message<QueryPythPriceStatesResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.PythPriceState price_states = 1;
   */
  priceStates: PythPriceState[] = [];

  constructor(data?: PartialMessage<QueryPythPriceStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryPythPriceStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: PythPriceState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPythPriceStatesResponse {
    return new QueryPythPriceStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPythPriceStatesResponse {
    return new QueryPythPriceStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPythPriceStatesResponse {
    return new QueryPythPriceStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPythPriceStatesResponse | PlainMessage<QueryPythPriceStatesResponse> | undefined, b: QueryPythPriceStatesResponse | PlainMessage<QueryPythPriceStatesResponse> | undefined): boolean {
    return proto3.util.equals(QueryPythPriceStatesResponse, a, b);
  }
}

/**
 * QueryStorkPriceStatesRequest is the request type for the
 * Query/StorkPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryStorkPriceStatesRequest
 */
export class QueryStorkPriceStatesRequest extends Message<QueryStorkPriceStatesRequest> {
  constructor(data?: PartialMessage<QueryStorkPriceStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryStorkPriceStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStorkPriceStatesRequest {
    return new QueryStorkPriceStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStorkPriceStatesRequest {
    return new QueryStorkPriceStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStorkPriceStatesRequest {
    return new QueryStorkPriceStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStorkPriceStatesRequest | PlainMessage<QueryStorkPriceStatesRequest> | undefined, b: QueryStorkPriceStatesRequest | PlainMessage<QueryStorkPriceStatesRequest> | undefined): boolean {
    return proto3.util.equals(QueryStorkPriceStatesRequest, a, b);
  }
}

/**
 * QueryStorkPriceStatesResponse is the response type for the
 * Query/StorkPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryStorkPriceStatesResponse
 */
export class QueryStorkPriceStatesResponse extends Message<QueryStorkPriceStatesResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.StorkPriceState price_states = 1;
   */
  priceStates: StorkPriceState[] = [];

  constructor(data?: PartialMessage<QueryStorkPriceStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryStorkPriceStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: StorkPriceState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStorkPriceStatesResponse {
    return new QueryStorkPriceStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStorkPriceStatesResponse {
    return new QueryStorkPriceStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStorkPriceStatesResponse {
    return new QueryStorkPriceStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStorkPriceStatesResponse | PlainMessage<QueryStorkPriceStatesResponse> | undefined, b: QueryStorkPriceStatesResponse | PlainMessage<QueryStorkPriceStatesResponse> | undefined): boolean {
    return proto3.util.equals(QueryStorkPriceStatesResponse, a, b);
  }
}

/**
 * QueryStorkPublishersRequest is the request type for the
 * Query/StorkPublishers RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryStorkPublishersRequest
 */
export class QueryStorkPublishersRequest extends Message<QueryStorkPublishersRequest> {
  constructor(data?: PartialMessage<QueryStorkPublishersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryStorkPublishersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStorkPublishersRequest {
    return new QueryStorkPublishersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStorkPublishersRequest {
    return new QueryStorkPublishersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStorkPublishersRequest {
    return new QueryStorkPublishersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStorkPublishersRequest | PlainMessage<QueryStorkPublishersRequest> | undefined, b: QueryStorkPublishersRequest | PlainMessage<QueryStorkPublishersRequest> | undefined): boolean {
    return proto3.util.equals(QueryStorkPublishersRequest, a, b);
  }
}

/**
 * QueryStorkPublishersResponse is the response type for the
 * Query/StorkPublishers RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryStorkPublishersResponse
 */
export class QueryStorkPublishersResponse extends Message<QueryStorkPublishersResponse> {
  /**
   * @generated from field: repeated string publishers = 1;
   */
  publishers: string[] = [];

  constructor(data?: PartialMessage<QueryStorkPublishersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryStorkPublishersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "publishers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStorkPublishersResponse {
    return new QueryStorkPublishersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStorkPublishersResponse {
    return new QueryStorkPublishersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStorkPublishersResponse {
    return new QueryStorkPublishersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStorkPublishersResponse | PlainMessage<QueryStorkPublishersResponse> | undefined, b: QueryStorkPublishersResponse | PlainMessage<QueryStorkPublishersResponse> | undefined): boolean {
    return proto3.util.equals(QueryStorkPublishersResponse, a, b);
  }
}

/**
 * QueryProviderPriceStateRequest is the request type for the
 * Query/ProviderPriceState RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryProviderPriceStateRequest
 */
export class QueryProviderPriceStateRequest extends Message<QueryProviderPriceStateRequest> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  constructor(data?: PartialMessage<QueryProviderPriceStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryProviderPriceStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProviderPriceStateRequest {
    return new QueryProviderPriceStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProviderPriceStateRequest {
    return new QueryProviderPriceStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProviderPriceStateRequest {
    return new QueryProviderPriceStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProviderPriceStateRequest | PlainMessage<QueryProviderPriceStateRequest> | undefined, b: QueryProviderPriceStateRequest | PlainMessage<QueryProviderPriceStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryProviderPriceStateRequest, a, b);
  }
}

/**
 * QueryProviderPriceStatesResponse is the response type for the
 * Query/ProviderPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryProviderPriceStateResponse
 */
export class QueryProviderPriceStateResponse extends Message<QueryProviderPriceStateResponse> {
  /**
   * @generated from field: injective.oracle.v1beta1.PriceState price_state = 1;
   */
  priceState?: PriceState;

  constructor(data?: PartialMessage<QueryProviderPriceStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryProviderPriceStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_state", kind: "message", T: PriceState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProviderPriceStateResponse {
    return new QueryProviderPriceStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProviderPriceStateResponse {
    return new QueryProviderPriceStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProviderPriceStateResponse {
    return new QueryProviderPriceStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProviderPriceStateResponse | PlainMessage<QueryProviderPriceStateResponse> | undefined, b: QueryProviderPriceStateResponse | PlainMessage<QueryProviderPriceStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryProviderPriceStateResponse, a, b);
  }
}

/**
 * QueryModuleStateRequest is the request type for the Query/OracleModuleState
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message<QueryModuleStateRequest> {
  constructor(data?: PartialMessage<QueryModuleStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryModuleStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined, b: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateRequest, a, b);
  }
}

/**
 * QueryModuleStateResponse is the response type for the Query/OracleModuleState
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message<QueryModuleStateResponse> {
  /**
   * @generated from field: injective.oracle.v1beta1.GenesisState state = 1;
   */
  state?: GenesisState;

  constructor(data?: PartialMessage<QueryModuleStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryModuleStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined, b: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateResponse, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest
 */
export class QueryHistoricalPriceRecordsRequest extends Message<QueryHistoricalPriceRecordsRequest> {
  /**
   * @generated from field: injective.oracle.v1beta1.OracleType oracle = 1;
   */
  oracle = OracleType.Unspecified;

  /**
   * @generated from field: string symbol_id = 2;
   */
  symbolId = "";

  constructor(data?: PartialMessage<QueryHistoricalPriceRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 2, name: "symbol_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHistoricalPriceRecordsRequest {
    return new QueryHistoricalPriceRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHistoricalPriceRecordsRequest {
    return new QueryHistoricalPriceRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHistoricalPriceRecordsRequest {
    return new QueryHistoricalPriceRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHistoricalPriceRecordsRequest | PlainMessage<QueryHistoricalPriceRecordsRequest> | undefined, b: QueryHistoricalPriceRecordsRequest | PlainMessage<QueryHistoricalPriceRecordsRequest> | undefined): boolean {
    return proto3.util.equals(QueryHistoricalPriceRecordsRequest, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse
 */
export class QueryHistoricalPriceRecordsResponse extends Message<QueryHistoricalPriceRecordsResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.PriceRecords price_records = 1;
   */
  priceRecords: PriceRecords[] = [];

  constructor(data?: PartialMessage<QueryHistoricalPriceRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_records", kind: "message", T: PriceRecords, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHistoricalPriceRecordsResponse {
    return new QueryHistoricalPriceRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHistoricalPriceRecordsResponse {
    return new QueryHistoricalPriceRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHistoricalPriceRecordsResponse {
    return new QueryHistoricalPriceRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHistoricalPriceRecordsResponse | PlainMessage<QueryHistoricalPriceRecordsResponse> | undefined, b: QueryHistoricalPriceRecordsResponse | PlainMessage<QueryHistoricalPriceRecordsResponse> | undefined): boolean {
    return proto3.util.equals(QueryHistoricalPriceRecordsResponse, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.OracleHistoryOptions
 */
export class OracleHistoryOptions extends Message<OracleHistoryOptions> {
  /**
   * MaxAge restricts the oracle price records oldest age in seconds from the
   * current block time to consider. A value of 0 means use all the records
   * present on the chain.
   *
   * @generated from field: uint64 max_age = 1;
   */
  maxAge = protoInt64.zero;

  /**
   * If IncludeRawHistory is true, the raw underlying data used for the
   * computation is included in the response
   *
   * @generated from field: bool include_raw_history = 2;
   */
  includeRawHistory = false;

  /**
   * If IncludeMetadata is true, metadata on the computation is included in the
   * response
   *
   * @generated from field: bool include_metadata = 3;
   */
  includeMetadata = false;

  constructor(data?: PartialMessage<OracleHistoryOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.OracleHistoryOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_age", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "include_raw_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "include_metadata", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OracleHistoryOptions {
    return new OracleHistoryOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OracleHistoryOptions {
    return new OracleHistoryOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OracleHistoryOptions {
    return new OracleHistoryOptions().fromJsonString(jsonString, options);
  }

  static equals(a: OracleHistoryOptions | PlainMessage<OracleHistoryOptions> | undefined, b: OracleHistoryOptions | PlainMessage<OracleHistoryOptions> | undefined): boolean {
    return proto3.util.equals(OracleHistoryOptions, a, b);
  }
}

/**
 * QueryOracleVolatilityRequest is the request type for Query/OracleVolatility
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOracleVolatilityRequest
 */
export class QueryOracleVolatilityRequest extends Message<QueryOracleVolatilityRequest> {
  /**
   * @generated from field: injective.oracle.v1beta1.OracleInfo base_info = 1;
   */
  baseInfo?: OracleInfo;

  /**
   * @generated from field: injective.oracle.v1beta1.OracleInfo quote_info = 2;
   */
  quoteInfo?: OracleInfo;

  /**
   * @generated from field: injective.oracle.v1beta1.OracleHistoryOptions oracle_history_options = 3;
   */
  oracleHistoryOptions?: OracleHistoryOptions;

  constructor(data?: PartialMessage<QueryOracleVolatilityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOracleVolatilityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_info", kind: "message", T: OracleInfo },
    { no: 2, name: "quote_info", kind: "message", T: OracleInfo },
    { no: 3, name: "oracle_history_options", kind: "message", T: OracleHistoryOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOracleVolatilityRequest {
    return new QueryOracleVolatilityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOracleVolatilityRequest {
    return new QueryOracleVolatilityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOracleVolatilityRequest {
    return new QueryOracleVolatilityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOracleVolatilityRequest | PlainMessage<QueryOracleVolatilityRequest> | undefined, b: QueryOracleVolatilityRequest | PlainMessage<QueryOracleVolatilityRequest> | undefined): boolean {
    return proto3.util.equals(QueryOracleVolatilityRequest, a, b);
  }
}

/**
 * QueryOracleVolatilityResponse is the response type for Query/OracleVolatility
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOracleVolatilityResponse
 */
export class QueryOracleVolatilityResponse extends Message<QueryOracleVolatilityResponse> {
  /**
   * @generated from field: string volatility = 1;
   */
  volatility = "";

  /**
   * @generated from field: injective.oracle.v1beta1.MetadataStatistics history_metadata = 2;
   */
  historyMetadata?: MetadataStatistics;

  /**
   * @generated from field: repeated injective.oracle.v1beta1.PriceRecord raw_history = 3;
   */
  rawHistory: PriceRecord[] = [];

  constructor(data?: PartialMessage<QueryOracleVolatilityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOracleVolatilityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "volatility", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "history_metadata", kind: "message", T: MetadataStatistics },
    { no: 3, name: "raw_history", kind: "message", T: PriceRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOracleVolatilityResponse {
    return new QueryOracleVolatilityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOracleVolatilityResponse {
    return new QueryOracleVolatilityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOracleVolatilityResponse {
    return new QueryOracleVolatilityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOracleVolatilityResponse | PlainMessage<QueryOracleVolatilityResponse> | undefined, b: QueryOracleVolatilityResponse | PlainMessage<QueryOracleVolatilityResponse> | undefined): boolean {
    return proto3.util.equals(QueryOracleVolatilityResponse, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProvidersInfoRequest
 */
export class QueryOracleProvidersInfoRequest extends Message<QueryOracleProvidersInfoRequest> {
  constructor(data?: PartialMessage<QueryOracleProvidersInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOracleProvidersInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOracleProvidersInfoRequest {
    return new QueryOracleProvidersInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOracleProvidersInfoRequest {
    return new QueryOracleProvidersInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOracleProvidersInfoRequest {
    return new QueryOracleProvidersInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOracleProvidersInfoRequest | PlainMessage<QueryOracleProvidersInfoRequest> | undefined, b: QueryOracleProvidersInfoRequest | PlainMessage<QueryOracleProvidersInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryOracleProvidersInfoRequest, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProvidersInfoResponse
 */
export class QueryOracleProvidersInfoResponse extends Message<QueryOracleProvidersInfoResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.ProviderInfo providers = 1;
   */
  providers: ProviderInfo[] = [];

  constructor(data?: PartialMessage<QueryOracleProvidersInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOracleProvidersInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "providers", kind: "message", T: ProviderInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOracleProvidersInfoResponse {
    return new QueryOracleProvidersInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOracleProvidersInfoResponse {
    return new QueryOracleProvidersInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOracleProvidersInfoResponse {
    return new QueryOracleProvidersInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOracleProvidersInfoResponse | PlainMessage<QueryOracleProvidersInfoResponse> | undefined, b: QueryOracleProvidersInfoResponse | PlainMessage<QueryOracleProvidersInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryOracleProvidersInfoResponse, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProviderPricesRequest
 */
export class QueryOracleProviderPricesRequest extends Message<QueryOracleProviderPricesRequest> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<QueryOracleProviderPricesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOracleProviderPricesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOracleProviderPricesRequest {
    return new QueryOracleProviderPricesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOracleProviderPricesRequest {
    return new QueryOracleProviderPricesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOracleProviderPricesRequest {
    return new QueryOracleProviderPricesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOracleProviderPricesRequest | PlainMessage<QueryOracleProviderPricesRequest> | undefined, b: QueryOracleProviderPricesRequest | PlainMessage<QueryOracleProviderPricesRequest> | undefined): boolean {
    return proto3.util.equals(QueryOracleProviderPricesRequest, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProviderPricesResponse
 */
export class QueryOracleProviderPricesResponse extends Message<QueryOracleProviderPricesResponse> {
  /**
   * @generated from field: repeated injective.oracle.v1beta1.ProviderState providerState = 1;
   */
  providerState: ProviderState[] = [];

  constructor(data?: PartialMessage<QueryOracleProviderPricesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOracleProviderPricesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "providerState", kind: "message", T: ProviderState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOracleProviderPricesResponse {
    return new QueryOracleProviderPricesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOracleProviderPricesResponse {
    return new QueryOracleProviderPricesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOracleProviderPricesResponse {
    return new QueryOracleProviderPricesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOracleProviderPricesResponse | PlainMessage<QueryOracleProviderPricesResponse> | undefined, b: QueryOracleProviderPricesResponse | PlainMessage<QueryOracleProviderPricesResponse> | undefined): boolean {
    return proto3.util.equals(QueryOracleProviderPricesResponse, a, b);
  }
}

/**
 * ScalingOptions defines optional configuration to avoid precision loss. The
 * oracle result will be returned as base_price * 10^base_decimals / quote_price
 * * 10^quote_decimals
 *
 * @generated from message injective.oracle.v1beta1.ScalingOptions
 */
export class ScalingOptions extends Message<ScalingOptions> {
  /**
   * @generated from field: uint32 base_decimals = 1;
   */
  baseDecimals = 0;

  /**
   * @generated from field: uint32 quote_decimals = 2;
   */
  quoteDecimals = 0;

  constructor(data?: PartialMessage<ScalingOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.ScalingOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_decimals", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "quote_decimals", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalingOptions {
    return new ScalingOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalingOptions {
    return new ScalingOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalingOptions {
    return new ScalingOptions().fromJsonString(jsonString, options);
  }

  static equals(a: ScalingOptions | PlainMessage<ScalingOptions> | undefined, b: ScalingOptions | PlainMessage<ScalingOptions> | undefined): boolean {
    return proto3.util.equals(ScalingOptions, a, b);
  }
}

/**
 * QueryOraclePriceRequest is the request type for the Query/OraclePrice RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOraclePriceRequest
 */
export class QueryOraclePriceRequest extends Message<QueryOraclePriceRequest> {
  /**
   * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 1;
   */
  oracleType = OracleType.Unspecified;

  /**
   * @generated from field: string base = 2;
   */
  base = "";

  /**
   * @generated from field: string quote = 3;
   */
  quote = "";

  /**
   * @generated from field: injective.oracle.v1beta1.ScalingOptions scaling_options = 4;
   */
  scalingOptions?: ScalingOptions;

  constructor(data?: PartialMessage<QueryOraclePriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOraclePriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 2, name: "base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "scaling_options", kind: "message", T: ScalingOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOraclePriceRequest {
    return new QueryOraclePriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOraclePriceRequest {
    return new QueryOraclePriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOraclePriceRequest {
    return new QueryOraclePriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOraclePriceRequest | PlainMessage<QueryOraclePriceRequest> | undefined, b: QueryOraclePriceRequest | PlainMessage<QueryOraclePriceRequest> | undefined): boolean {
    return proto3.util.equals(QueryOraclePriceRequest, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.PricePairState
 */
export class PricePairState extends Message<PricePairState> {
  /**
   * @generated from field: string pair_price = 1;
   */
  pairPrice = "";

  /**
   * @generated from field: string base_price = 2;
   */
  basePrice = "";

  /**
   * @generated from field: string quote_price = 3;
   */
  quotePrice = "";

  /**
   * @generated from field: string base_cumulative_price = 4;
   */
  baseCumulativePrice = "";

  /**
   * @generated from field: string quote_cumulative_price = 5;
   */
  quoteCumulativePrice = "";

  /**
   * @generated from field: int64 base_timestamp = 6;
   */
  baseTimestamp = protoInt64.zero;

  /**
   * @generated from field: int64 quote_timestamp = 7;
   */
  quoteTimestamp = protoInt64.zero;

  constructor(data?: PartialMessage<PricePairState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.PricePairState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "base_cumulative_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "quote_cumulative_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "base_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "quote_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PricePairState {
    return new PricePairState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PricePairState {
    return new PricePairState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PricePairState {
    return new PricePairState().fromJsonString(jsonString, options);
  }

  static equals(a: PricePairState | PlainMessage<PricePairState> | undefined, b: PricePairState | PlainMessage<PricePairState> | undefined): boolean {
    return proto3.util.equals(PricePairState, a, b);
  }
}

/**
 * QueryOraclePriceResponse is the response type for the Query/OraclePrice RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOraclePriceResponse
 */
export class QueryOraclePriceResponse extends Message<QueryOraclePriceResponse> {
  /**
   * @generated from field: injective.oracle.v1beta1.PricePairState price_pair_state = 1;
   */
  pricePairState?: PricePairState;

  constructor(data?: PartialMessage<QueryOraclePriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.QueryOraclePriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price_pair_state", kind: "message", T: PricePairState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOraclePriceResponse {
    return new QueryOraclePriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOraclePriceResponse {
    return new QueryOraclePriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOraclePriceResponse {
    return new QueryOraclePriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOraclePriceResponse | PlainMessage<QueryOraclePriceResponse> | undefined, b: QueryOraclePriceResponse | PlainMessage<QueryOraclePriceResponse> | undefined): boolean {
    return proto3.util.equals(QueryOraclePriceResponse, a, b);
  }
}

