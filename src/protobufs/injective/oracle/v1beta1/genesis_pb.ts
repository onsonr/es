// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/oracle/v1beta1/genesis.proto (package injective.oracle.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BandIBCParams, BandOracleRequest, BandPriceState, ChainlinkPriceState, CoinbasePriceState, Params, PriceFeedState, PriceRecords, ProviderState, PythPriceState, StorkPriceState } from "./oracle_pb.js";

/**
 * GenesisState defines the oracle module's genesis state.
 *
 * @generated from message injective.oracle.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of related to oracle.
   *
   * @generated from field: injective.oracle.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: repeated string band_relayers = 2;
   */
  bandRelayers: string[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.BandPriceState band_price_states = 3;
   */
  bandPriceStates: BandPriceState[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.PriceFeedState price_feed_price_states = 4;
   */
  priceFeedPriceStates: PriceFeedState[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.CoinbasePriceState coinbase_price_states = 5;
   */
  coinbasePriceStates: CoinbasePriceState[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.BandPriceState band_ibc_price_states = 6;
   */
  bandIbcPriceStates: BandPriceState[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.BandOracleRequest band_ibc_oracle_requests = 7;
   */
  bandIbcOracleRequests: BandOracleRequest[] = [];

  /**
   * @generated from field: injective.oracle.v1beta1.BandIBCParams band_ibc_params = 8;
   */
  bandIbcParams?: BandIBCParams;

  /**
   * @generated from field: uint64 band_ibc_latest_client_id = 9;
   */
  bandIbcLatestClientId = protoInt64.zero;

  /**
   * @generated from field: repeated injective.oracle.v1beta1.CalldataRecord calldata_records = 10;
   */
  calldataRecords: CalldataRecord[] = [];

  /**
   * @generated from field: uint64 band_ibc_latest_request_id = 11;
   */
  bandIbcLatestRequestId = protoInt64.zero;

  /**
   * @generated from field: repeated injective.oracle.v1beta1.ChainlinkPriceState chainlink_price_states = 12;
   */
  chainlinkPriceStates: ChainlinkPriceState[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.PriceRecords historical_price_records = 13;
   */
  historicalPriceRecords: PriceRecords[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.ProviderState provider_states = 14;
   */
  providerStates: ProviderState[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.PythPriceState pyth_price_states = 15;
   */
  pythPriceStates: PythPriceState[] = [];

  /**
   * @generated from field: repeated injective.oracle.v1beta1.StorkPriceState stork_price_states = 16;
   */
  storkPriceStates: StorkPriceState[] = [];

  /**
   * @generated from field: repeated string stork_publishers = 17;
   */
  storkPublishers: string[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "band_relayers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "band_price_states", kind: "message", T: BandPriceState, repeated: true },
    { no: 4, name: "price_feed_price_states", kind: "message", T: PriceFeedState, repeated: true },
    { no: 5, name: "coinbase_price_states", kind: "message", T: CoinbasePriceState, repeated: true },
    { no: 6, name: "band_ibc_price_states", kind: "message", T: BandPriceState, repeated: true },
    { no: 7, name: "band_ibc_oracle_requests", kind: "message", T: BandOracleRequest, repeated: true },
    { no: 8, name: "band_ibc_params", kind: "message", T: BandIBCParams },
    { no: 9, name: "band_ibc_latest_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "calldata_records", kind: "message", T: CalldataRecord, repeated: true },
    { no: 11, name: "band_ibc_latest_request_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "chainlink_price_states", kind: "message", T: ChainlinkPriceState, repeated: true },
    { no: 13, name: "historical_price_records", kind: "message", T: PriceRecords, repeated: true },
    { no: 14, name: "provider_states", kind: "message", T: ProviderState, repeated: true },
    { no: 15, name: "pyth_price_states", kind: "message", T: PythPriceState, repeated: true },
    { no: 16, name: "stork_price_states", kind: "message", T: StorkPriceState, repeated: true },
    { no: 17, name: "stork_publishers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * @generated from message injective.oracle.v1beta1.CalldataRecord
 */
export class CalldataRecord extends Message<CalldataRecord> {
  /**
   * @generated from field: uint64 client_id = 1;
   */
  clientId = protoInt64.zero;

  /**
   * @generated from field: bytes calldata = 2;
   */
  calldata = new Uint8Array(0);

  constructor(data?: PartialMessage<CalldataRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.oracle.v1beta1.CalldataRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "calldata", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalldataRecord {
    return new CalldataRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalldataRecord {
    return new CalldataRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalldataRecord {
    return new CalldataRecord().fromJsonString(jsonString, options);
  }

  static equals(a: CalldataRecord | PlainMessage<CalldataRecord> | undefined, b: CalldataRecord | PlainMessage<CalldataRecord> | undefined): boolean {
    return proto3.util.equals(CalldataRecord, a, b);
  }
}

