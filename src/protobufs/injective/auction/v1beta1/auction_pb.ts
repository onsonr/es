// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/auction/v1beta1/auction.proto (package injective.auction.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message injective.auction.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * auction_period_duration defines the auction period duration
   *
   * @generated from field: int64 auction_period = 1;
   */
  auctionPeriod = protoInt64.zero;

  /**
   * min_next_bid_increment_rate defines the minimum increment rate for new bids
   *
   * @generated from field: string min_next_bid_increment_rate = 2;
   */
  minNextBidIncrementRate = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.auction.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_period", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "min_next_bid_increment_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message injective.auction.v1beta1.Bid
 */
export class Bid extends Message<Bid> {
  /**
   * @generated from field: string bidder = 1;
   */
  bidder = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<Bid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.auction.v1beta1.Bid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bidder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bid {
    return new Bid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bid {
    return new Bid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bid {
    return new Bid().fromJsonString(jsonString, options);
  }

  static equals(a: Bid | PlainMessage<Bid> | undefined, b: Bid | PlainMessage<Bid> | undefined): boolean {
    return proto3.util.equals(Bid, a, b);
  }
}

/**
 * @generated from message injective.auction.v1beta1.LastAuctionResult
 */
export class LastAuctionResult extends Message<LastAuctionResult> {
  /**
   * winner describes the address of the winner
   *
   * @generated from field: string winner = 1;
   */
  winner = "";

  /**
   * amount describes the amount the winner get from the auction
   *
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * round defines the round number of auction
   *
   * @generated from field: uint64 round = 3;
   */
  round = protoInt64.zero;

  constructor(data?: PartialMessage<LastAuctionResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.auction.v1beta1.LastAuctionResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "winner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastAuctionResult {
    return new LastAuctionResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastAuctionResult {
    return new LastAuctionResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastAuctionResult {
    return new LastAuctionResult().fromJsonString(jsonString, options);
  }

  static equals(a: LastAuctionResult | PlainMessage<LastAuctionResult> | undefined, b: LastAuctionResult | PlainMessage<LastAuctionResult> | undefined): boolean {
    return proto3.util.equals(LastAuctionResult, a, b);
  }
}

/**
 * @generated from message injective.auction.v1beta1.EventBid
 */
export class EventBid extends Message<EventBid> {
  /**
   * bidder describes the address of bidder
   *
   * @generated from field: string bidder = 1;
   */
  bidder = "";

  /**
   * amount describes the amount the bidder put on the auction
   *
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * round defines the round number of auction
   *
   * @generated from field: uint64 round = 3;
   */
  round = protoInt64.zero;

  constructor(data?: PartialMessage<EventBid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.auction.v1beta1.EventBid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bidder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBid {
    return new EventBid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBid {
    return new EventBid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBid {
    return new EventBid().fromJsonString(jsonString, options);
  }

  static equals(a: EventBid | PlainMessage<EventBid> | undefined, b: EventBid | PlainMessage<EventBid> | undefined): boolean {
    return proto3.util.equals(EventBid, a, b);
  }
}

/**
 * @generated from message injective.auction.v1beta1.EventAuctionResult
 */
export class EventAuctionResult extends Message<EventAuctionResult> {
  /**
   * winner describes the address of the winner
   *
   * @generated from field: string winner = 1;
   */
  winner = "";

  /**
   * amount describes the amount the winner get from the auction
   *
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * round defines the round number of auction
   *
   * @generated from field: uint64 round = 3;
   */
  round = protoInt64.zero;

  constructor(data?: PartialMessage<EventAuctionResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.auction.v1beta1.EventAuctionResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "winner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAuctionResult {
    return new EventAuctionResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAuctionResult {
    return new EventAuctionResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAuctionResult {
    return new EventAuctionResult().fromJsonString(jsonString, options);
  }

  static equals(a: EventAuctionResult | PlainMessage<EventAuctionResult> | undefined, b: EventAuctionResult | PlainMessage<EventAuctionResult> | undefined): boolean {
    return proto3.util.equals(EventAuctionResult, a, b);
  }
}

/**
 * @generated from message injective.auction.v1beta1.EventAuctionStart
 */
export class EventAuctionStart extends Message<EventAuctionStart> {
  /**
   * round defines the round number of auction
   *
   * @generated from field: uint64 round = 1;
   */
  round = protoInt64.zero;

  /**
   * ending_timestamp describes auction end time
   *
   * @generated from field: int64 ending_timestamp = 2;
   */
  endingTimestamp = protoInt64.zero;

  /**
   * new_basket describes auction module balance at the time of new auction
   * start
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin new_basket = 3;
   */
  newBasket: Coin[] = [];

  constructor(data?: PartialMessage<EventAuctionStart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.auction.v1beta1.EventAuctionStart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ending_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "new_basket", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAuctionStart {
    return new EventAuctionStart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAuctionStart {
    return new EventAuctionStart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAuctionStart {
    return new EventAuctionStart().fromJsonString(jsonString, options);
  }

  static equals(a: EventAuctionStart | PlainMessage<EventAuctionStart> | undefined, b: EventAuctionStart | PlainMessage<EventAuctionStart> | undefined): boolean {
    return proto3.util.equals(EventAuctionStart, a, b);
  }
}

