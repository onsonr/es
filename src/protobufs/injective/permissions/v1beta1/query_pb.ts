// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/permissions/v1beta1/query.proto (package injective.permissions.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Namespace } from "./permissions_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: injective.permissions.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAllNamespacesRequest is the request type for the Query/AllNamespaces RPC
 * method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAllNamespacesRequest
 */
export class QueryAllNamespacesRequest extends Message<QueryAllNamespacesRequest> {
  constructor(data?: PartialMessage<QueryAllNamespacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryAllNamespacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllNamespacesRequest {
    return new QueryAllNamespacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllNamespacesRequest {
    return new QueryAllNamespacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllNamespacesRequest {
    return new QueryAllNamespacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllNamespacesRequest | PlainMessage<QueryAllNamespacesRequest> | undefined, b: QueryAllNamespacesRequest | PlainMessage<QueryAllNamespacesRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllNamespacesRequest, a, b);
  }
}

/**
 * QueryAllNamespacesResponse is the response type for the Query/AllNamespaces
 * RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAllNamespacesResponse
 */
export class QueryAllNamespacesResponse extends Message<QueryAllNamespacesResponse> {
  /**
   * @generated from field: repeated injective.permissions.v1beta1.Namespace namespaces = 1;
   */
  namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<QueryAllNamespacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryAllNamespacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespaces", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllNamespacesResponse {
    return new QueryAllNamespacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllNamespacesResponse {
    return new QueryAllNamespacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllNamespacesResponse {
    return new QueryAllNamespacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllNamespacesResponse | PlainMessage<QueryAllNamespacesResponse> | undefined, b: QueryAllNamespacesResponse | PlainMessage<QueryAllNamespacesResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllNamespacesResponse, a, b);
  }
}

/**
 * QueryNamespaceByDenomRequest is the request type for the
 * Query/NamespaceByDenom RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryNamespaceByDenomRequest
 */
export class QueryNamespaceByDenomRequest extends Message<QueryNamespaceByDenomRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: bool include_roles = 2;
   */
  includeRoles = false;

  constructor(data?: PartialMessage<QueryNamespaceByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryNamespaceByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "include_roles", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNamespaceByDenomRequest {
    return new QueryNamespaceByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNamespaceByDenomRequest {
    return new QueryNamespaceByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNamespaceByDenomRequest {
    return new QueryNamespaceByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNamespaceByDenomRequest | PlainMessage<QueryNamespaceByDenomRequest> | undefined, b: QueryNamespaceByDenomRequest | PlainMessage<QueryNamespaceByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryNamespaceByDenomRequest, a, b);
  }
}

/**
 * QueryNamespaceByDenomResponse is the response type for the
 * Query/NamespaceByDenom RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryNamespaceByDenomResponse
 */
export class QueryNamespaceByDenomResponse extends Message<QueryNamespaceByDenomResponse> {
  /**
   * @generated from field: injective.permissions.v1beta1.Namespace namespace = 1;
   */
  namespace?: Namespace;

  constructor(data?: PartialMessage<QueryNamespaceByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryNamespaceByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "message", T: Namespace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNamespaceByDenomResponse {
    return new QueryNamespaceByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNamespaceByDenomResponse {
    return new QueryNamespaceByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNamespaceByDenomResponse {
    return new QueryNamespaceByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNamespaceByDenomResponse | PlainMessage<QueryNamespaceByDenomResponse> | undefined, b: QueryNamespaceByDenomResponse | PlainMessage<QueryNamespaceByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryNamespaceByDenomResponse, a, b);
  }
}

/**
 * QueryAddressesByRoleRequest is the request type for the Query/AddressesByRole
 * RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAddressesByRoleRequest
 */
export class QueryAddressesByRoleRequest extends Message<QueryAddressesByRoleRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  constructor(data?: PartialMessage<QueryAddressesByRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryAddressesByRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressesByRoleRequest {
    return new QueryAddressesByRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressesByRoleRequest {
    return new QueryAddressesByRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressesByRoleRequest {
    return new QueryAddressesByRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressesByRoleRequest | PlainMessage<QueryAddressesByRoleRequest> | undefined, b: QueryAddressesByRoleRequest | PlainMessage<QueryAddressesByRoleRequest> | undefined): boolean {
    return proto3.util.equals(QueryAddressesByRoleRequest, a, b);
  }
}

/**
 * QueryAddressesByRoleResponse is the response type for the
 * Query/AddressesByRole RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAddressesByRoleResponse
 */
export class QueryAddressesByRoleResponse extends Message<QueryAddressesByRoleResponse> {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses: string[] = [];

  constructor(data?: PartialMessage<QueryAddressesByRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryAddressesByRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressesByRoleResponse {
    return new QueryAddressesByRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressesByRoleResponse {
    return new QueryAddressesByRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressesByRoleResponse {
    return new QueryAddressesByRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressesByRoleResponse | PlainMessage<QueryAddressesByRoleResponse> | undefined, b: QueryAddressesByRoleResponse | PlainMessage<QueryAddressesByRoleResponse> | undefined): boolean {
    return proto3.util.equals(QueryAddressesByRoleResponse, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.QueryAddressRolesRequest
 */
export class QueryAddressRolesRequest extends Message<QueryAddressRolesRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<QueryAddressRolesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryAddressRolesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressRolesRequest {
    return new QueryAddressRolesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressRolesRequest {
    return new QueryAddressRolesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressRolesRequest {
    return new QueryAddressRolesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressRolesRequest | PlainMessage<QueryAddressRolesRequest> | undefined, b: QueryAddressRolesRequest | PlainMessage<QueryAddressRolesRequest> | undefined): boolean {
    return proto3.util.equals(QueryAddressRolesRequest, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.QueryAddressRolesResponse
 */
export class QueryAddressRolesResponse extends Message<QueryAddressRolesResponse> {
  /**
   * @generated from field: repeated string roles = 1;
   */
  roles: string[] = [];

  constructor(data?: PartialMessage<QueryAddressRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryAddressRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressRolesResponse {
    return new QueryAddressRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressRolesResponse {
    return new QueryAddressRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressRolesResponse {
    return new QueryAddressRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressRolesResponse | PlainMessage<QueryAddressRolesResponse> | undefined, b: QueryAddressRolesResponse | PlainMessage<QueryAddressRolesResponse> | undefined): boolean {
    return proto3.util.equals(QueryAddressRolesResponse, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.QueryVouchersForAddressRequest
 */
export class QueryVouchersForAddressRequest extends Message<QueryVouchersForAddressRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryVouchersForAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryVouchersForAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVouchersForAddressRequest {
    return new QueryVouchersForAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVouchersForAddressRequest {
    return new QueryVouchersForAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVouchersForAddressRequest {
    return new QueryVouchersForAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVouchersForAddressRequest | PlainMessage<QueryVouchersForAddressRequest> | undefined, b: QueryVouchersForAddressRequest | PlainMessage<QueryVouchersForAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryVouchersForAddressRequest, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.QueryVouchersForAddressResponse
 */
export class QueryVouchersForAddressResponse extends Message<QueryVouchersForAddressResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin vouchers = 1;
   */
  vouchers: Coin[] = [];

  constructor(data?: PartialMessage<QueryVouchersForAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.QueryVouchersForAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vouchers", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVouchersForAddressResponse {
    return new QueryVouchersForAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVouchersForAddressResponse {
    return new QueryVouchersForAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVouchersForAddressResponse {
    return new QueryVouchersForAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVouchersForAddressResponse | PlainMessage<QueryVouchersForAddressResponse> | undefined, b: QueryVouchersForAddressResponse | PlainMessage<QueryVouchersForAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryVouchersForAddressResponse, a, b);
  }
}

