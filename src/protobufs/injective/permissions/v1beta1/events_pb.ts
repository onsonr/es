// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/permissions/v1beta1/events.proto (package injective.permissions.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message injective.permissions.v1beta1.EventSetVoucher
 */
export class EventSetVoucher extends Message<EventSetVoucher> {
  /**
   * @generated from field: string addr = 1;
   */
  addr = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin voucher = 2;
   */
  voucher?: Coin;

  constructor(data?: PartialMessage<EventSetVoucher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.EventSetVoucher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "voucher", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetVoucher {
    return new EventSetVoucher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetVoucher {
    return new EventSetVoucher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetVoucher {
    return new EventSetVoucher().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetVoucher | PlainMessage<EventSetVoucher> | undefined, b: EventSetVoucher | PlainMessage<EventSetVoucher> | undefined): boolean {
    return proto3.util.equals(EventSetVoucher, a, b);
  }
}

