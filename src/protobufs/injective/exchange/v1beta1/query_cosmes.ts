// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file injective/exchange/v1beta1/query.proto (package injective.exchange.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MitoVaultInfosRequest, MitoVaultInfosResponse, QueryAccountAddressDerivativeOrdersRequest, QueryAccountAddressDerivativeOrdersResponse, QueryAccountAddressSpotOrdersRequest, QueryAccountAddressSpotOrdersResponse, QueryActiveStakeGrantRequest, QueryActiveStakeGrantResponse, QueryAggregateMarketVolumeRequest, QueryAggregateMarketVolumeResponse, QueryAggregateMarketVolumesRequest, QueryAggregateMarketVolumesResponse, QueryAggregateVolumeRequest, QueryAggregateVolumeResponse, QueryAggregateVolumesRequest, QueryAggregateVolumesResponse, QueryBalanceMismatchesRequest, QueryBalanceMismatchesResponse, QueryBalanceWithBalanceHoldsRequest, QueryBalanceWithBalanceHoldsResponse, QueryBinaryMarketsRequest, QueryBinaryMarketsResponse, QueryDenomDecimalRequest, QueryDenomDecimalResponse, QueryDenomDecimalsRequest, QueryDenomDecimalsResponse, QueryDerivativeMarketAddressRequest, QueryDerivativeMarketAddressResponse, QueryDerivativeMarketRequest, QueryDerivativeMarketResponse, QueryDerivativeMarketsRequest, QueryDerivativeMarketsResponse, QueryDerivativeMidPriceAndTOBRequest, QueryDerivativeMidPriceAndTOBResponse, QueryDerivativeOrderbookRequest, QueryDerivativeOrderbookResponse, QueryDerivativeOrdersByHashesRequest, QueryDerivativeOrdersByHashesResponse, QueryExchangeBalancesRequest, QueryExchangeBalancesResponse, QueryExchangeParamsRequest, QueryExchangeParamsResponse, QueryExpiryFuturesMarketInfoRequest, QueryExpiryFuturesMarketInfoResponse, QueryFeeDiscountAccountInfoRequest, QueryFeeDiscountAccountInfoResponse, QueryFeeDiscountScheduleRequest, QueryFeeDiscountScheduleResponse, QueryFeeDiscountTierStatisticsRequest, QueryFeeDiscountTierStatisticsResponse, QueryFullSpotMarketRequest, QueryFullSpotMarketResponse, QueryFullSpotMarketsRequest, QueryFullSpotMarketsResponse, QueryGrantAuthorizationRequest, QueryGrantAuthorizationResponse, QueryGrantAuthorizationsRequest, QueryGrantAuthorizationsResponse, QueryHistoricalTradeRecordsRequest, QueryHistoricalTradeRecordsResponse, QueryIsOptedOutOfRewardsRequest, QueryIsOptedOutOfRewardsResponse, QueryMarketAtomicExecutionFeeMultiplierRequest, QueryMarketAtomicExecutionFeeMultiplierResponse, QueryMarketIDFromVaultRequest, QueryMarketIDFromVaultResponse, QueryMarketVolatilityRequest, QueryMarketVolatilityResponse, QueryModuleStateRequest, QueryModuleStateResponse, QueryOptedOutOfRewardsAccountsRequest, QueryOptedOutOfRewardsAccountsResponse, QueryPerpetualMarketFundingRequest, QueryPerpetualMarketFundingResponse, QueryPerpetualMarketInfoRequest, QueryPerpetualMarketInfoResponse, QueryPositionsRequest, QueryPositionsResponse, QuerySpotMarketRequest, QuerySpotMarketResponse, QuerySpotMarketsRequest, QuerySpotMarketsResponse, QuerySpotMidPriceAndTOBRequest, QuerySpotMidPriceAndTOBResponse, QuerySpotOrderbookRequest, QuerySpotOrderbookResponse, QuerySpotOrdersByHashesRequest, QuerySpotOrdersByHashesResponse, QuerySubaccountDepositRequest, QuerySubaccountDepositResponse, QuerySubaccountDepositsRequest, QuerySubaccountDepositsResponse, QuerySubaccountEffectivePositionInMarketRequest, QuerySubaccountEffectivePositionInMarketResponse, QuerySubaccountOrderMetadataRequest, QuerySubaccountOrderMetadataResponse, QuerySubaccountOrdersRequest, QuerySubaccountOrdersResponse, QuerySubaccountPositionInMarketRequest, QuerySubaccountPositionInMarketResponse, QuerySubaccountPositionsRequest, QuerySubaccountPositionsResponse, QuerySubaccountTradeNonceRequest, QuerySubaccountTradeNonceResponse, QueryTraderDerivativeConditionalOrdersRequest, QueryTraderDerivativeConditionalOrdersResponse, QueryTraderDerivativeOrdersRequest, QueryTraderDerivativeOrdersResponse, QueryTradeRewardCampaignRequest, QueryTradeRewardCampaignResponse, QueryTradeRewardPointsRequest, QueryTradeRewardPointsResponse, QueryTraderSpotOrdersRequest, QueryTraderSpotOrdersResponse } from "./query_pb.js";

const TYPE_NAME = "injective.exchange.v1beta1.Query";

/**
 * Retrieves exchange params
 *
 * @generated from rpc injective.exchange.v1beta1.Query.QueryExchangeParams
 */
export const QueryQueryExchangeParamsService = {
  typeName: TYPE_NAME,
  method: "QueryExchangeParams",
  Request: QueryExchangeParamsRequest,
  Response: QueryExchangeParamsResponse,
} as const;

/**
 * Retrieves a Subaccount's Deposits
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountDeposits
 */
export const QuerySubaccountDepositsService = {
  typeName: TYPE_NAME,
  method: "SubaccountDeposits",
  Request: QuerySubaccountDepositsRequest,
  Response: QuerySubaccountDepositsResponse,
} as const;

/**
 * Retrieves a Subaccount's Deposits
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountDeposit
 */
export const QuerySubaccountDepositService = {
  typeName: TYPE_NAME,
  method: "SubaccountDeposit",
  Request: QuerySubaccountDepositRequest,
  Response: QuerySubaccountDepositResponse,
} as const;

/**
 * Retrieves all of the balances of all users on the exchange.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.ExchangeBalances
 */
export const QueryExchangeBalancesService = {
  typeName: TYPE_NAME,
  method: "ExchangeBalances",
  Request: QueryExchangeBalancesRequest,
  Response: QueryExchangeBalancesResponse,
} as const;

/**
 * Retrieves the aggregate volumes for the specified account or subaccount
 *
 * @generated from rpc injective.exchange.v1beta1.Query.AggregateVolume
 */
export const QueryAggregateVolumeService = {
  typeName: TYPE_NAME,
  method: "AggregateVolume",
  Request: QueryAggregateVolumeRequest,
  Response: QueryAggregateVolumeResponse,
} as const;

/**
 * Retrieves the aggregate volumes for specified accounts
 *
 * @generated from rpc injective.exchange.v1beta1.Query.AggregateVolumes
 */
export const QueryAggregateVolumesService = {
  typeName: TYPE_NAME,
  method: "AggregateVolumes",
  Request: QueryAggregateVolumesRequest,
  Response: QueryAggregateVolumesResponse,
} as const;

/**
 * Retrieves the aggregate volume for the specified market
 *
 * @generated from rpc injective.exchange.v1beta1.Query.AggregateMarketVolume
 */
export const QueryAggregateMarketVolumeService = {
  typeName: TYPE_NAME,
  method: "AggregateMarketVolume",
  Request: QueryAggregateMarketVolumeRequest,
  Response: QueryAggregateMarketVolumeResponse,
} as const;

/**
 * Retrieves the aggregate market volumes for specified markets
 *
 * @generated from rpc injective.exchange.v1beta1.Query.AggregateMarketVolumes
 */
export const QueryAggregateMarketVolumesService = {
  typeName: TYPE_NAME,
  method: "AggregateMarketVolumes",
  Request: QueryAggregateMarketVolumesRequest,
  Response: QueryAggregateMarketVolumesResponse,
} as const;

/**
 * Retrieves the denom decimals for a denom.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DenomDecimal
 */
export const QueryDenomDecimalService = {
  typeName: TYPE_NAME,
  method: "DenomDecimal",
  Request: QueryDenomDecimalRequest,
  Response: QueryDenomDecimalResponse,
} as const;

/**
 * Retrieves the denom decimals for multiple denoms. Returns all denom
 * decimals if unspecified.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DenomDecimals
 */
export const QueryDenomDecimalsService = {
  typeName: TYPE_NAME,
  method: "DenomDecimals",
  Request: QueryDenomDecimalsRequest,
  Response: QueryDenomDecimalsResponse,
} as const;

/**
 * Retrieves a list of spot markets.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SpotMarkets
 */
export const QuerySpotMarketsService = {
  typeName: TYPE_NAME,
  method: "SpotMarkets",
  Request: QuerySpotMarketsRequest,
  Response: QuerySpotMarketsResponse,
} as const;

/**
 * Retrieves a spot market by ticker
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SpotMarket
 */
export const QuerySpotMarketService = {
  typeName: TYPE_NAME,
  method: "SpotMarket",
  Request: QuerySpotMarketRequest,
  Response: QuerySpotMarketResponse,
} as const;

/**
 * Retrieves a list of spot markets with extra information.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.FullSpotMarkets
 */
export const QueryFullSpotMarketsService = {
  typeName: TYPE_NAME,
  method: "FullSpotMarkets",
  Request: QueryFullSpotMarketsRequest,
  Response: QueryFullSpotMarketsResponse,
} as const;

/**
 * Retrieves a spot market with extra information.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.FullSpotMarket
 */
export const QueryFullSpotMarketService = {
  typeName: TYPE_NAME,
  method: "FullSpotMarket",
  Request: QueryFullSpotMarketRequest,
  Response: QueryFullSpotMarketResponse,
} as const;

/**
 * Retrieves a spot market's orderbook by marketID
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SpotOrderbook
 */
export const QuerySpotOrderbookService = {
  typeName: TYPE_NAME,
  method: "SpotOrderbook",
  Request: QuerySpotOrderbookRequest,
  Response: QuerySpotOrderbookResponse,
} as const;

/**
 * Retrieves a trader's spot orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.TraderSpotOrders
 */
export const QueryTraderSpotOrdersService = {
  typeName: TYPE_NAME,
  method: "TraderSpotOrders",
  Request: QueryTraderSpotOrdersRequest,
  Response: QueryTraderSpotOrdersResponse,
} as const;

/**
 * Retrieves all account address spot orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.AccountAddressSpotOrders
 */
export const QueryAccountAddressSpotOrdersService = {
  typeName: TYPE_NAME,
  method: "AccountAddressSpotOrders",
  Request: QueryAccountAddressSpotOrdersRequest,
  Response: QueryAccountAddressSpotOrdersResponse,
} as const;

/**
 * Retrieves spot orders corresponding to specified order hashes for a given
 * subaccountID and marketID
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SpotOrdersByHashes
 */
export const QuerySpotOrdersByHashesService = {
  typeName: TYPE_NAME,
  method: "SpotOrdersByHashes",
  Request: QuerySpotOrdersByHashesRequest,
  Response: QuerySpotOrdersByHashesResponse,
} as const;

/**
 * Retrieves subaccount's orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountOrders
 */
export const QuerySubaccountOrdersService = {
  typeName: TYPE_NAME,
  method: "SubaccountOrders",
  Request: QuerySubaccountOrdersRequest,
  Response: QuerySubaccountOrdersResponse,
} as const;

/**
 * Retrieves a trader's transient spot orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.TraderSpotTransientOrders
 */
export const QueryTraderSpotTransientOrdersService = {
  typeName: TYPE_NAME,
  method: "TraderSpotTransientOrders",
  Request: QueryTraderSpotOrdersRequest,
  Response: QueryTraderSpotOrdersResponse,
} as const;

/**
 * Retrieves a spot market's mid-price
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SpotMidPriceAndTOB
 */
export const QuerySpotMidPriceAndTOBService = {
  typeName: TYPE_NAME,
  method: "SpotMidPriceAndTOB",
  Request: QuerySpotMidPriceAndTOBRequest,
  Response: QuerySpotMidPriceAndTOBResponse,
} as const;

/**
 * Retrieves a derivative market's mid-price
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DerivativeMidPriceAndTOB
 */
export const QueryDerivativeMidPriceAndTOBService = {
  typeName: TYPE_NAME,
  method: "DerivativeMidPriceAndTOB",
  Request: QueryDerivativeMidPriceAndTOBRequest,
  Response: QueryDerivativeMidPriceAndTOBResponse,
} as const;

/**
 * Retrieves a derivative market's orderbook by marketID
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DerivativeOrderbook
 */
export const QueryDerivativeOrderbookService = {
  typeName: TYPE_NAME,
  method: "DerivativeOrderbook",
  Request: QueryDerivativeOrderbookRequest,
  Response: QueryDerivativeOrderbookResponse,
} as const;

/**
 * Retrieves a trader's derivative orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.TraderDerivativeOrders
 */
export const QueryTraderDerivativeOrdersService = {
  typeName: TYPE_NAME,
  method: "TraderDerivativeOrders",
  Request: QueryTraderDerivativeOrdersRequest,
  Response: QueryTraderDerivativeOrdersResponse,
} as const;

/**
 * Retrieves all account address derivative orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.AccountAddressDerivativeOrders
 */
export const QueryAccountAddressDerivativeOrdersService = {
  typeName: TYPE_NAME,
  method: "AccountAddressDerivativeOrders",
  Request: QueryAccountAddressDerivativeOrdersRequest,
  Response: QueryAccountAddressDerivativeOrdersResponse,
} as const;

/**
 * Retrieves a trader's derivative orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DerivativeOrdersByHashes
 */
export const QueryDerivativeOrdersByHashesService = {
  typeName: TYPE_NAME,
  method: "DerivativeOrdersByHashes",
  Request: QueryDerivativeOrdersByHashesRequest,
  Response: QueryDerivativeOrdersByHashesResponse,
} as const;

/**
 * Retrieves a trader's transient derivative orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.TraderDerivativeTransientOrders
 */
export const QueryTraderDerivativeTransientOrdersService = {
  typeName: TYPE_NAME,
  method: "TraderDerivativeTransientOrders",
  Request: QueryTraderDerivativeOrdersRequest,
  Response: QueryTraderDerivativeOrdersResponse,
} as const;

/**
 * Retrieves a list of derivative markets.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DerivativeMarkets
 */
export const QueryDerivativeMarketsService = {
  typeName: TYPE_NAME,
  method: "DerivativeMarkets",
  Request: QueryDerivativeMarketsRequest,
  Response: QueryDerivativeMarketsResponse,
} as const;

/**
 * Retrieves a derivative market by ticker
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DerivativeMarket
 */
export const QueryDerivativeMarketService = {
  typeName: TYPE_NAME,
  method: "DerivativeMarket",
  Request: QueryDerivativeMarketRequest,
  Response: QueryDerivativeMarketResponse,
} as const;

/**
 * Retrieves a derivative market's corresponding address for fees that
 * contribute to the market's insurance fund
 *
 * @generated from rpc injective.exchange.v1beta1.Query.DerivativeMarketAddress
 */
export const QueryDerivativeMarketAddressService = {
  typeName: TYPE_NAME,
  method: "DerivativeMarketAddress",
  Request: QueryDerivativeMarketAddressRequest,
  Response: QueryDerivativeMarketAddressResponse,
} as const;

/**
 * Retrieves a subaccount's trade nonce
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountTradeNonce
 */
export const QuerySubaccountTradeNonceService = {
  typeName: TYPE_NAME,
  method: "SubaccountTradeNonce",
  Request: QuerySubaccountTradeNonceRequest,
  Response: QuerySubaccountTradeNonceResponse,
} as const;

/**
 * Retrieves the entire exchange module's state
 *
 * @generated from rpc injective.exchange.v1beta1.Query.ExchangeModuleState
 */
export const QueryExchangeModuleStateService = {
  typeName: TYPE_NAME,
  method: "ExchangeModuleState",
  Request: QueryModuleStateRequest,
  Response: QueryModuleStateResponse,
} as const;

/**
 * Retrieves the entire exchange module's positions
 *
 * @generated from rpc injective.exchange.v1beta1.Query.Positions
 */
export const QueryPositionsService = {
  typeName: TYPE_NAME,
  method: "Positions",
  Request: QueryPositionsRequest,
  Response: QueryPositionsResponse,
} as const;

/**
 * Retrieves subaccount's positions
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountPositions
 */
export const QuerySubaccountPositionsService = {
  typeName: TYPE_NAME,
  method: "SubaccountPositions",
  Request: QuerySubaccountPositionsRequest,
  Response: QuerySubaccountPositionsResponse,
} as const;

/**
 * Retrieves subaccount's position in market
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountPositionInMarket
 */
export const QuerySubaccountPositionInMarketService = {
  typeName: TYPE_NAME,
  method: "SubaccountPositionInMarket",
  Request: QuerySubaccountPositionInMarketRequest,
  Response: QuerySubaccountPositionInMarketResponse,
} as const;

/**
 * Retrieves subaccount's position in market
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountEffectivePositionInMarket
 */
export const QuerySubaccountEffectivePositionInMarketService = {
  typeName: TYPE_NAME,
  method: "SubaccountEffectivePositionInMarket",
  Request: QuerySubaccountEffectivePositionInMarketRequest,
  Response: QuerySubaccountEffectivePositionInMarketResponse,
} as const;

/**
 * Retrieves perpetual market info
 *
 * @generated from rpc injective.exchange.v1beta1.Query.PerpetualMarketInfo
 */
export const QueryPerpetualMarketInfoService = {
  typeName: TYPE_NAME,
  method: "PerpetualMarketInfo",
  Request: QueryPerpetualMarketInfoRequest,
  Response: QueryPerpetualMarketInfoResponse,
} as const;

/**
 * Retrieves expiry market info
 *
 * @generated from rpc injective.exchange.v1beta1.Query.ExpiryFuturesMarketInfo
 */
export const QueryExpiryFuturesMarketInfoService = {
  typeName: TYPE_NAME,
  method: "ExpiryFuturesMarketInfo",
  Request: QueryExpiryFuturesMarketInfoRequest,
  Response: QueryExpiryFuturesMarketInfoResponse,
} as const;

/**
 * Retrieves perpetual market funding
 *
 * @generated from rpc injective.exchange.v1beta1.Query.PerpetualMarketFunding
 */
export const QueryPerpetualMarketFundingService = {
  typeName: TYPE_NAME,
  method: "PerpetualMarketFunding",
  Request: QueryPerpetualMarketFundingRequest,
  Response: QueryPerpetualMarketFundingResponse,
} as const;

/**
 * Retrieves subaccount's order metadata
 *
 * @generated from rpc injective.exchange.v1beta1.Query.SubaccountOrderMetadata
 */
export const QuerySubaccountOrderMetadataService = {
  typeName: TYPE_NAME,
  method: "SubaccountOrderMetadata",
  Request: QuerySubaccountOrderMetadataRequest,
  Response: QuerySubaccountOrderMetadataResponse,
} as const;

/**
 * Retrieves the account and total trade rewards points
 *
 * @generated from rpc injective.exchange.v1beta1.Query.TradeRewardPoints
 */
export const QueryTradeRewardPointsService = {
  typeName: TYPE_NAME,
  method: "TradeRewardPoints",
  Request: QueryTradeRewardPointsRequest,
  Response: QueryTradeRewardPointsResponse,
} as const;

/**
 * Retrieves the pending account and total trade rewards points
 *
 * @generated from rpc injective.exchange.v1beta1.Query.PendingTradeRewardPoints
 */
export const QueryPendingTradeRewardPointsService = {
  typeName: TYPE_NAME,
  method: "PendingTradeRewardPoints",
  Request: QueryTradeRewardPointsRequest,
  Response: QueryTradeRewardPointsResponse,
} as const;

/**
 * Retrieves the trade reward campaign
 *
 * @generated from rpc injective.exchange.v1beta1.Query.TradeRewardCampaign
 */
export const QueryTradeRewardCampaignService = {
  typeName: TYPE_NAME,
  method: "TradeRewardCampaign",
  Request: QueryTradeRewardCampaignRequest,
  Response: QueryTradeRewardCampaignResponse,
} as const;

/**
 * Retrieves the account's fee discount info
 *
 * @generated from rpc injective.exchange.v1beta1.Query.FeeDiscountAccountInfo
 */
export const QueryFeeDiscountAccountInfoService = {
  typeName: TYPE_NAME,
  method: "FeeDiscountAccountInfo",
  Request: QueryFeeDiscountAccountInfoRequest,
  Response: QueryFeeDiscountAccountInfoResponse,
} as const;

/**
 * Retrieves the fee discount schedule
 *
 * @generated from rpc injective.exchange.v1beta1.Query.FeeDiscountSchedule
 */
export const QueryFeeDiscountScheduleService = {
  typeName: TYPE_NAME,
  method: "FeeDiscountSchedule",
  Request: QueryFeeDiscountScheduleRequest,
  Response: QueryFeeDiscountScheduleResponse,
} as const;

/**
 * Retrieves mismatches between available vs. total balance
 *
 * @generated from rpc injective.exchange.v1beta1.Query.BalanceMismatches
 */
export const QueryBalanceMismatchesService = {
  typeName: TYPE_NAME,
  method: "BalanceMismatches",
  Request: QueryBalanceMismatchesRequest,
  Response: QueryBalanceMismatchesResponse,
} as const;

/**
 * Retrieves available and total balances with balance holds
 *
 * @generated from rpc injective.exchange.v1beta1.Query.BalanceWithBalanceHolds
 */
export const QueryBalanceWithBalanceHoldsService = {
  typeName: TYPE_NAME,
  method: "BalanceWithBalanceHolds",
  Request: QueryBalanceWithBalanceHoldsRequest,
  Response: QueryBalanceWithBalanceHoldsResponse,
} as const;

/**
 * Retrieves fee discount tier stats
 *
 * @generated from rpc injective.exchange.v1beta1.Query.FeeDiscountTierStatistics
 */
export const QueryFeeDiscountTierStatisticsService = {
  typeName: TYPE_NAME,
  method: "FeeDiscountTierStatistics",
  Request: QueryFeeDiscountTierStatisticsRequest,
  Response: QueryFeeDiscountTierStatisticsResponse,
} as const;

/**
 * Retrieves market making pool info
 *
 * @generated from rpc injective.exchange.v1beta1.Query.MitoVaultInfos
 */
export const QueryMitoVaultInfosService = {
  typeName: TYPE_NAME,
  method: "MitoVaultInfos",
  Request: MitoVaultInfosRequest,
  Response: MitoVaultInfosResponse,
} as const;

/**
 * QueryMarketIDFromVault returns the market ID for a given vault subaccount
 * ID
 *
 * @generated from rpc injective.exchange.v1beta1.Query.QueryMarketIDFromVault
 */
export const QueryQueryMarketIDFromVaultService = {
  typeName: TYPE_NAME,
  method: "QueryMarketIDFromVault",
  Request: QueryMarketIDFromVaultRequest,
  Response: QueryMarketIDFromVaultResponse,
} as const;

/**
 * Retrieves historical trade records for a given market ID
 *
 * @generated from rpc injective.exchange.v1beta1.Query.HistoricalTradeRecords
 */
export const QueryHistoricalTradeRecordsService = {
  typeName: TYPE_NAME,
  method: "HistoricalTradeRecords",
  Request: QueryHistoricalTradeRecordsRequest,
  Response: QueryHistoricalTradeRecordsResponse,
} as const;

/**
 * Retrieves if the account is opted out of rewards
 *
 * @generated from rpc injective.exchange.v1beta1.Query.IsOptedOutOfRewards
 */
export const QueryIsOptedOutOfRewardsService = {
  typeName: TYPE_NAME,
  method: "IsOptedOutOfRewards",
  Request: QueryIsOptedOutOfRewardsRequest,
  Response: QueryIsOptedOutOfRewardsResponse,
} as const;

/**
 * Retrieves all accounts opted out of rewards
 *
 * @generated from rpc injective.exchange.v1beta1.Query.OptedOutOfRewardsAccounts
 */
export const QueryOptedOutOfRewardsAccountsService = {
  typeName: TYPE_NAME,
  method: "OptedOutOfRewardsAccounts",
  Request: QueryOptedOutOfRewardsAccountsRequest,
  Response: QueryOptedOutOfRewardsAccountsResponse,
} as const;

/**
 * MarketVolatility computes the volatility for spot and derivative markets
 * trading history.
 *
 * @generated from rpc injective.exchange.v1beta1.Query.MarketVolatility
 */
export const QueryMarketVolatilityService = {
  typeName: TYPE_NAME,
  method: "MarketVolatility",
  Request: QueryMarketVolatilityRequest,
  Response: QueryMarketVolatilityResponse,
} as const;

/**
 * Retrieves a spot market's orderbook by marketID
 *
 * @generated from rpc injective.exchange.v1beta1.Query.BinaryOptionsMarkets
 */
export const QueryBinaryOptionsMarketsService = {
  typeName: TYPE_NAME,
  method: "BinaryOptionsMarkets",
  Request: QueryBinaryMarketsRequest,
  Response: QueryBinaryMarketsResponse,
} as const;

/**
 * Retrieves a trader's derivative conditional orders
 *
 * @generated from rpc injective.exchange.v1beta1.Query.TraderDerivativeConditionalOrders
 */
export const QueryTraderDerivativeConditionalOrdersService = {
  typeName: TYPE_NAME,
  method: "TraderDerivativeConditionalOrders",
  Request: QueryTraderDerivativeConditionalOrdersRequest,
  Response: QueryTraderDerivativeConditionalOrdersResponse,
} as const;

/**
 * @generated from rpc injective.exchange.v1beta1.Query.MarketAtomicExecutionFeeMultiplier
 */
export const QueryMarketAtomicExecutionFeeMultiplierService = {
  typeName: TYPE_NAME,
  method: "MarketAtomicExecutionFeeMultiplier",
  Request: QueryMarketAtomicExecutionFeeMultiplierRequest,
  Response: QueryMarketAtomicExecutionFeeMultiplierResponse,
} as const;

/**
 * Retrieves the active stake grant for a grantee
 *
 * @generated from rpc injective.exchange.v1beta1.Query.ActiveStakeGrant
 */
export const QueryActiveStakeGrantService = {
  typeName: TYPE_NAME,
  method: "ActiveStakeGrant",
  Request: QueryActiveStakeGrantRequest,
  Response: QueryActiveStakeGrantResponse,
} as const;

/**
 * Retrieves the grant authorization amount for a granter and grantee
 *
 * @generated from rpc injective.exchange.v1beta1.Query.GrantAuthorization
 */
export const QueryGrantAuthorizationService = {
  typeName: TYPE_NAME,
  method: "GrantAuthorization",
  Request: QueryGrantAuthorizationRequest,
  Response: QueryGrantAuthorizationResponse,
} as const;

/**
 * Retrieves the grant authorization amount for a granter and grantee
 *
 * @generated from rpc injective.exchange.v1beta1.Query.GrantAuthorizations
 */
export const QueryGrantAuthorizationsService = {
  typeName: TYPE_NAME,
  method: "GrantAuthorizations",
  Request: QueryGrantAuthorizationsRequest,
  Response: QueryGrantAuthorizationsResponse,
} as const;

