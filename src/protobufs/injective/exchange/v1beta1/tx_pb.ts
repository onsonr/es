// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/exchange/v1beta1/tx.proto (package injective.exchange.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DerivativeOrder, GrantAuthorization, MarketStatus, Params, PositionDelta, SpotOrder } from "./exchange_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { OracleType } from "../../oracle/v1beta1/oracle_pb.js";

/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateSpotMarket
 */
export class MsgUpdateSpotMarket extends Message<MsgUpdateSpotMarket> {
  /**
   * current admin address of the associated market
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * id of the market to be updated
   *
   * @generated from field: string market_id = 2;
   */
  marketId = "";

  /**
   * (optional) updated ticker value
   *
   * @generated from field: string new_ticker = 3;
   */
  newTicker = "";

  /**
   * (optional) updated min price tick size value
   *
   * @generated from field: string new_min_price_tick_size = 4;
   */
  newMinPriceTickSize = "";

  /**
   * (optional) updated min quantity tick size value
   *
   * @generated from field: string new_min_quantity_tick_size = 5;
   */
  newMinQuantityTickSize = "";

  /**
   * (optional) updated min notional
   *
   * @generated from field: string new_min_notional = 6;
   */
  newMinNotional = "";

  constructor(data?: PartialMessage<MsgUpdateSpotMarket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgUpdateSpotMarket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "new_min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "new_min_notional", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateSpotMarket {
    return new MsgUpdateSpotMarket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateSpotMarket {
    return new MsgUpdateSpotMarket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateSpotMarket {
    return new MsgUpdateSpotMarket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateSpotMarket | PlainMessage<MsgUpdateSpotMarket> | undefined, b: MsgUpdateSpotMarket | PlainMessage<MsgUpdateSpotMarket> | undefined): boolean {
    return proto3.util.equals(MsgUpdateSpotMarket, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateSpotMarketResponse
 */
export class MsgUpdateSpotMarketResponse extends Message<MsgUpdateSpotMarketResponse> {
  constructor(data?: PartialMessage<MsgUpdateSpotMarketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgUpdateSpotMarketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateSpotMarketResponse {
    return new MsgUpdateSpotMarketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateSpotMarketResponse {
    return new MsgUpdateSpotMarketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateSpotMarketResponse {
    return new MsgUpdateSpotMarketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateSpotMarketResponse | PlainMessage<MsgUpdateSpotMarketResponse> | undefined, b: MsgUpdateSpotMarketResponse | PlainMessage<MsgUpdateSpotMarketResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateSpotMarketResponse, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateDerivativeMarket
 */
export class MsgUpdateDerivativeMarket extends Message<MsgUpdateDerivativeMarket> {
  /**
   * current admin address of the associated market
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * id of the market to be updated
   *
   * @generated from field: string market_id = 2;
   */
  marketId = "";

  /**
   * (optional) updated value for ticker
   *
   * @generated from field: string new_ticker = 3;
   */
  newTicker = "";

  /**
   * (optional) updated value for min_price_tick_size
   *
   * @generated from field: string new_min_price_tick_size = 4;
   */
  newMinPriceTickSize = "";

  /**
   * (optional) updated value min_quantity_tick_size
   *
   * @generated from field: string new_min_quantity_tick_size = 5;
   */
  newMinQuantityTickSize = "";

  /**
   * (optional) updated min notional
   *
   * @generated from field: string new_min_notional = 6;
   */
  newMinNotional = "";

  /**
   * (optional) updated value for initial_margin_ratio
   *
   * @generated from field: string new_initial_margin_ratio = 7;
   */
  newInitialMarginRatio = "";

  /**
   * (optional) updated value for maintenance_margin_ratio
   *
   * @generated from field: string new_maintenance_margin_ratio = 8;
   */
  newMaintenanceMarginRatio = "";

  constructor(data?: PartialMessage<MsgUpdateDerivativeMarket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgUpdateDerivativeMarket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "new_min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "new_min_notional", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "new_initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "new_maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateDerivativeMarket {
    return new MsgUpdateDerivativeMarket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateDerivativeMarket {
    return new MsgUpdateDerivativeMarket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateDerivativeMarket {
    return new MsgUpdateDerivativeMarket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateDerivativeMarket | PlainMessage<MsgUpdateDerivativeMarket> | undefined, b: MsgUpdateDerivativeMarket | PlainMessage<MsgUpdateDerivativeMarket> | undefined): boolean {
    return proto3.util.equals(MsgUpdateDerivativeMarket, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateDerivativeMarketResponse
 */
export class MsgUpdateDerivativeMarketResponse extends Message<MsgUpdateDerivativeMarketResponse> {
  constructor(data?: PartialMessage<MsgUpdateDerivativeMarketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgUpdateDerivativeMarketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateDerivativeMarketResponse {
    return new MsgUpdateDerivativeMarketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateDerivativeMarketResponse {
    return new MsgUpdateDerivativeMarketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateDerivativeMarketResponse {
    return new MsgUpdateDerivativeMarketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateDerivativeMarketResponse | PlainMessage<MsgUpdateDerivativeMarketResponse> | undefined, b: MsgUpdateDerivativeMarketResponse | PlainMessage<MsgUpdateDerivativeMarketResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateDerivativeMarketResponse, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the exchange parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: injective.exchange.v1beta1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgDeposit defines a SDK message for transferring coins from the sender's
 * bank balance into the subaccount's exchange deposits
 *
 * @generated from message injective.exchange.v1beta1.MsgDeposit
 */
export class MsgDeposit extends Message<MsgDeposit> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * (Optional) bytes32 subaccount ID to deposit funds into. If empty, the coin
   * will be deposited to the sender's default subaccount address.
   *
   * @generated from field: string subaccount_id = 2;
   */
  subaccountId = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgDeposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgDeposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeposit {
    return new MsgDeposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeposit | PlainMessage<MsgDeposit> | undefined, b: MsgDeposit | PlainMessage<MsgDeposit> | undefined): boolean {
    return proto3.util.equals(MsgDeposit, a, b);
  }
}

/**
 * MsgDepositResponse defines the Msg/Deposit response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgDepositResponse
 */
export class MsgDepositResponse extends Message<MsgDepositResponse> {
  constructor(data?: PartialMessage<MsgDepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgDepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined, b: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined): boolean {
    return proto3.util.equals(MsgDepositResponse, a, b);
  }
}

/**
 * MsgWithdraw defines a SDK message for withdrawing coins from a subaccount's
 * deposits to the user's bank balance
 *
 * @generated from message injective.exchange.v1beta1.MsgWithdraw
 */
export class MsgWithdraw extends Message<MsgWithdraw> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * bytes32 subaccount ID to withdraw funds from
   *
   * @generated from field: string subaccount_id = 2;
   */
  subaccountId = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgWithdraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgWithdraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined, b: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined): boolean {
    return proto3.util.equals(MsgWithdraw, a, b);
  }
}

/**
 * MsgWithdraw defines the Msg/Withdraw response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgWithdrawResponse
 */
export class MsgWithdrawResponse extends Message<MsgWithdrawResponse> {
  constructor(data?: PartialMessage<MsgWithdrawResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgWithdrawResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined, b: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawResponse, a, b);
  }
}

/**
 * MsgCreateSpotLimitOrder defines a SDK message for creating a new spot limit
 * order.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotLimitOrder
 */
export class MsgCreateSpotLimitOrder extends Message<MsgCreateSpotLimitOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.exchange.v1beta1.SpotOrder order = 2;
   */
  order?: SpotOrder;

  constructor(data?: PartialMessage<MsgCreateSpotLimitOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateSpotLimitOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: SpotOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateSpotLimitOrder {
    return new MsgCreateSpotLimitOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateSpotLimitOrder {
    return new MsgCreateSpotLimitOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateSpotLimitOrder {
    return new MsgCreateSpotLimitOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateSpotLimitOrder | PlainMessage<MsgCreateSpotLimitOrder> | undefined, b: MsgCreateSpotLimitOrder | PlainMessage<MsgCreateSpotLimitOrder> | undefined): boolean {
    return proto3.util.equals(MsgCreateSpotLimitOrder, a, b);
  }
}

/**
 * MsgCreateSpotLimitOrderResponse defines the Msg/CreateSpotOrder response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse
 */
export class MsgCreateSpotLimitOrderResponse extends Message<MsgCreateSpotLimitOrderResponse> {
  /**
   * @generated from field: string order_hash = 1;
   */
  orderHash = "";

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCreateSpotLimitOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateSpotLimitOrderResponse {
    return new MsgCreateSpotLimitOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateSpotLimitOrderResponse {
    return new MsgCreateSpotLimitOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateSpotLimitOrderResponse {
    return new MsgCreateSpotLimitOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateSpotLimitOrderResponse | PlainMessage<MsgCreateSpotLimitOrderResponse> | undefined, b: MsgCreateSpotLimitOrderResponse | PlainMessage<MsgCreateSpotLimitOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateSpotLimitOrderResponse, a, b);
  }
}

/**
 * MsgBatchCreateSpotLimitOrders defines a SDK message for creating a new batch
 * of spot limit orders.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders
 */
export class MsgBatchCreateSpotLimitOrders extends Message<MsgBatchCreateSpotLimitOrders> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.exchange.v1beta1.SpotOrder orders = 2;
   */
  orders: SpotOrder[] = [];

  constructor(data?: PartialMessage<MsgBatchCreateSpotLimitOrders>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orders", kind: "message", T: SpotOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCreateSpotLimitOrders {
    return new MsgBatchCreateSpotLimitOrders().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCreateSpotLimitOrders {
    return new MsgBatchCreateSpotLimitOrders().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCreateSpotLimitOrders {
    return new MsgBatchCreateSpotLimitOrders().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCreateSpotLimitOrders | PlainMessage<MsgBatchCreateSpotLimitOrders> | undefined, b: MsgBatchCreateSpotLimitOrders | PlainMessage<MsgBatchCreateSpotLimitOrders> | undefined): boolean {
    return proto3.util.equals(MsgBatchCreateSpotLimitOrders, a, b);
  }
}

/**
 * MsgBatchCreateSpotLimitOrdersResponse defines the
 * Msg/BatchCreateSpotLimitOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse
 */
export class MsgBatchCreateSpotLimitOrdersResponse extends Message<MsgBatchCreateSpotLimitOrdersResponse> {
  /**
   * @generated from field: repeated string order_hashes = 1;
   */
  orderHashes: string[] = [];

  /**
   * @generated from field: repeated string created_orders_cids = 2;
   */
  createdOrdersCids: string[] = [];

  /**
   * @generated from field: repeated string failed_orders_cids = 3;
   */
  failedOrdersCids: string[] = [];

  constructor(data?: PartialMessage<MsgBatchCreateSpotLimitOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "created_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "failed_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCreateSpotLimitOrdersResponse {
    return new MsgBatchCreateSpotLimitOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCreateSpotLimitOrdersResponse {
    return new MsgBatchCreateSpotLimitOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCreateSpotLimitOrdersResponse {
    return new MsgBatchCreateSpotLimitOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCreateSpotLimitOrdersResponse | PlainMessage<MsgBatchCreateSpotLimitOrdersResponse> | undefined, b: MsgBatchCreateSpotLimitOrdersResponse | PlainMessage<MsgBatchCreateSpotLimitOrdersResponse> | undefined): boolean {
    return proto3.util.equals(MsgBatchCreateSpotLimitOrdersResponse, a, b);
  }
}

/**
 * MsgInstantSpotMarketLaunch defines a SDK message for creating a new spot
 * market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantSpotMarketLaunch
 */
export class MsgInstantSpotMarketLaunch extends Message<MsgInstantSpotMarketLaunch> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Ticker for the spot market.
   *
   * @generated from field: string ticker = 2;
   */
  ticker = "";

  /**
   * type of coin to use as the base currency
   *
   * @generated from field: string base_denom = 3;
   */
  baseDenom = "";

  /**
   * type of coin to use as the quote currency
   *
   * @generated from field: string quote_denom = 4;
   */
  quoteDenom = "";

  /**
   * min_price_tick_size defines the minimum tick size of the order's price
   *
   * @generated from field: string min_price_tick_size = 5;
   */
  minPriceTickSize = "";

  /**
   * min_quantity_tick_size defines the minimum tick size of the order's
   * quantity
   *
   * @generated from field: string min_quantity_tick_size = 6;
   */
  minQuantityTickSize = "";

  /**
   * min_notional defines the minimum notional (in quote asset) required for
   * orders in the market
   *
   * @generated from field: string min_notional = 7;
   */
  minNotional = "";

  constructor(data?: PartialMessage<MsgInstantSpotMarketLaunch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "min_notional", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantSpotMarketLaunch {
    return new MsgInstantSpotMarketLaunch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantSpotMarketLaunch {
    return new MsgInstantSpotMarketLaunch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantSpotMarketLaunch {
    return new MsgInstantSpotMarketLaunch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantSpotMarketLaunch | PlainMessage<MsgInstantSpotMarketLaunch> | undefined, b: MsgInstantSpotMarketLaunch | PlainMessage<MsgInstantSpotMarketLaunch> | undefined): boolean {
    return proto3.util.equals(MsgInstantSpotMarketLaunch, a, b);
  }
}

/**
 * MsgInstantSpotMarketLaunchResponse defines the Msg/InstantSpotMarketLaunch
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantSpotMarketLaunchResponse
 */
export class MsgInstantSpotMarketLaunchResponse extends Message<MsgInstantSpotMarketLaunchResponse> {
  constructor(data?: PartialMessage<MsgInstantSpotMarketLaunchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantSpotMarketLaunchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantSpotMarketLaunchResponse {
    return new MsgInstantSpotMarketLaunchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantSpotMarketLaunchResponse {
    return new MsgInstantSpotMarketLaunchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantSpotMarketLaunchResponse {
    return new MsgInstantSpotMarketLaunchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantSpotMarketLaunchResponse | PlainMessage<MsgInstantSpotMarketLaunchResponse> | undefined, b: MsgInstantSpotMarketLaunchResponse | PlainMessage<MsgInstantSpotMarketLaunchResponse> | undefined): boolean {
    return proto3.util.equals(MsgInstantSpotMarketLaunchResponse, a, b);
  }
}

/**
 * MsgInstantPerpetualMarketLaunch defines a SDK message for creating a new
 * perpetual futures market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch
 */
export class MsgInstantPerpetualMarketLaunch extends Message<MsgInstantPerpetualMarketLaunch> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Ticker for the derivative market.
   *
   * @generated from field: string ticker = 2;
   */
  ticker = "";

  /**
   * type of coin to use as the base currency
   *
   * @generated from field: string quote_denom = 3;
   */
  quoteDenom = "";

  /**
   * Oracle base currency
   *
   * @generated from field: string oracle_base = 4;
   */
  oracleBase = "";

  /**
   * Oracle quote currency
   *
   * @generated from field: string oracle_quote = 5;
   */
  oracleQuote = "";

  /**
   * Scale factor for oracle prices.
   *
   * @generated from field: uint32 oracle_scale_factor = 6;
   */
  oracleScaleFactor = 0;

  /**
   * Oracle type
   *
   * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 7;
   */
  oracleType = OracleType.Unspecified;

  /**
   * maker_fee_rate defines the trade fee rate for makers on the perpetual
   * market
   *
   * @generated from field: string maker_fee_rate = 8;
   */
  makerFeeRate = "";

  /**
   * taker_fee_rate defines the trade fee rate for takers on the perpetual
   * market
   *
   * @generated from field: string taker_fee_rate = 9;
   */
  takerFeeRate = "";

  /**
   * initial_margin_ratio defines the initial margin ratio for the perpetual
   * market
   *
   * @generated from field: string initial_margin_ratio = 10;
   */
  initialMarginRatio = "";

  /**
   * maintenance_margin_ratio defines the maintenance margin ratio for the
   * perpetual market
   *
   * @generated from field: string maintenance_margin_ratio = 11;
   */
  maintenanceMarginRatio = "";

  /**
   * min_price_tick_size defines the minimum tick size of the order's price and
   * margin
   *
   * @generated from field: string min_price_tick_size = 12;
   */
  minPriceTickSize = "";

  /**
   * min_quantity_tick_size defines the minimum tick size of the order's
   * quantity
   *
   * @generated from field: string min_quantity_tick_size = 13;
   */
  minQuantityTickSize = "";

  /**
   * min_notional defines the minimum notional (in quote asset) required for
   * orders in the market
   *
   * @generated from field: string min_notional = 14;
   */
  minNotional = "";

  constructor(data?: PartialMessage<MsgInstantPerpetualMarketLaunch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 8, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_notional", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantPerpetualMarketLaunch {
    return new MsgInstantPerpetualMarketLaunch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantPerpetualMarketLaunch {
    return new MsgInstantPerpetualMarketLaunch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantPerpetualMarketLaunch {
    return new MsgInstantPerpetualMarketLaunch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantPerpetualMarketLaunch | PlainMessage<MsgInstantPerpetualMarketLaunch> | undefined, b: MsgInstantPerpetualMarketLaunch | PlainMessage<MsgInstantPerpetualMarketLaunch> | undefined): boolean {
    return proto3.util.equals(MsgInstantPerpetualMarketLaunch, a, b);
  }
}

/**
 * MsgInstantPerpetualMarketLaunchResponse defines the
 * Msg/InstantPerpetualMarketLaunchResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunchResponse
 */
export class MsgInstantPerpetualMarketLaunchResponse extends Message<MsgInstantPerpetualMarketLaunchResponse> {
  constructor(data?: PartialMessage<MsgInstantPerpetualMarketLaunchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantPerpetualMarketLaunchResponse {
    return new MsgInstantPerpetualMarketLaunchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantPerpetualMarketLaunchResponse {
    return new MsgInstantPerpetualMarketLaunchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantPerpetualMarketLaunchResponse {
    return new MsgInstantPerpetualMarketLaunchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantPerpetualMarketLaunchResponse | PlainMessage<MsgInstantPerpetualMarketLaunchResponse> | undefined, b: MsgInstantPerpetualMarketLaunchResponse | PlainMessage<MsgInstantPerpetualMarketLaunchResponse> | undefined): boolean {
    return proto3.util.equals(MsgInstantPerpetualMarketLaunchResponse, a, b);
  }
}

/**
 * MsgInstantBinaryOptionsMarketLaunch defines a SDK message for creating a new
 * perpetual futures market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch
 */
export class MsgInstantBinaryOptionsMarketLaunch extends Message<MsgInstantBinaryOptionsMarketLaunch> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Ticker for the derivative contract.
   *
   * @generated from field: string ticker = 2;
   */
  ticker = "";

  /**
   * Oracle symbol
   *
   * @generated from field: string oracle_symbol = 3;
   */
  oracleSymbol = "";

  /**
   * Oracle Provider
   *
   * @generated from field: string oracle_provider = 4;
   */
  oracleProvider = "";

  /**
   * Oracle type
   *
   * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 5;
   */
  oracleType = OracleType.Unspecified;

  /**
   * Scale factor for oracle prices.
   *
   * @generated from field: uint32 oracle_scale_factor = 6;
   */
  oracleScaleFactor = 0;

  /**
   * maker_fee_rate defines the trade fee rate for makers on the perpetual
   * market
   *
   * @generated from field: string maker_fee_rate = 7;
   */
  makerFeeRate = "";

  /**
   * taker_fee_rate defines the trade fee rate for takers on the perpetual
   * market
   *
   * @generated from field: string taker_fee_rate = 8;
   */
  takerFeeRate = "";

  /**
   * expiration timestamp
   *
   * @generated from field: int64 expiration_timestamp = 9;
   */
  expirationTimestamp = protoInt64.zero;

  /**
   * expiration timestamp
   *
   * @generated from field: int64 settlement_timestamp = 10;
   */
  settlementTimestamp = protoInt64.zero;

  /**
   * admin of the market
   *
   * @generated from field: string admin = 11;
   */
  admin = "";

  /**
   * Address of the quote currency denomination for the binary options contract
   *
   * @generated from field: string quote_denom = 12;
   */
  quoteDenom = "";

  /**
   * min_price_tick_size defines the minimum tick size that the price and margin
   * required for orders in the market
   *
   * @generated from field: string min_price_tick_size = 13;
   */
  minPriceTickSize = "";

  /**
   * min_quantity_tick_size defines the minimum tick size of the quantity
   * required for orders in the market
   *
   * @generated from field: string min_quantity_tick_size = 14;
   */
  minQuantityTickSize = "";

  /**
   * min_notional defines the minimum notional (in quote asset) required for
   * orders in the market
   *
   * @generated from field: string min_notional = 15;
   */
  minNotional = "";

  constructor(data?: PartialMessage<MsgInstantBinaryOptionsMarketLaunch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oracle_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oracle_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 6, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "expiration_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "settlement_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "min_notional", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantBinaryOptionsMarketLaunch {
    return new MsgInstantBinaryOptionsMarketLaunch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantBinaryOptionsMarketLaunch {
    return new MsgInstantBinaryOptionsMarketLaunch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantBinaryOptionsMarketLaunch {
    return new MsgInstantBinaryOptionsMarketLaunch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantBinaryOptionsMarketLaunch | PlainMessage<MsgInstantBinaryOptionsMarketLaunch> | undefined, b: MsgInstantBinaryOptionsMarketLaunch | PlainMessage<MsgInstantBinaryOptionsMarketLaunch> | undefined): boolean {
    return proto3.util.equals(MsgInstantBinaryOptionsMarketLaunch, a, b);
  }
}

/**
 * MsgInstantBinaryOptionsMarketLaunchResponse defines the
 * Msg/InstantBinaryOptionsMarketLaunchResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunchResponse
 */
export class MsgInstantBinaryOptionsMarketLaunchResponse extends Message<MsgInstantBinaryOptionsMarketLaunchResponse> {
  constructor(data?: PartialMessage<MsgInstantBinaryOptionsMarketLaunchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantBinaryOptionsMarketLaunchResponse {
    return new MsgInstantBinaryOptionsMarketLaunchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantBinaryOptionsMarketLaunchResponse {
    return new MsgInstantBinaryOptionsMarketLaunchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantBinaryOptionsMarketLaunchResponse {
    return new MsgInstantBinaryOptionsMarketLaunchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantBinaryOptionsMarketLaunchResponse | PlainMessage<MsgInstantBinaryOptionsMarketLaunchResponse> | undefined, b: MsgInstantBinaryOptionsMarketLaunchResponse | PlainMessage<MsgInstantBinaryOptionsMarketLaunchResponse> | undefined): boolean {
    return proto3.util.equals(MsgInstantBinaryOptionsMarketLaunchResponse, a, b);
  }
}

/**
 * MsgInstantExpiryFuturesMarketLaunch defines a SDK message for creating a new
 * expiry futures market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch
 */
export class MsgInstantExpiryFuturesMarketLaunch extends Message<MsgInstantExpiryFuturesMarketLaunch> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Ticker for the derivative market.
   *
   * @generated from field: string ticker = 2;
   */
  ticker = "";

  /**
   * type of coin to use as the quote currency
   *
   * @generated from field: string quote_denom = 3;
   */
  quoteDenom = "";

  /**
   * Oracle base currency
   *
   * @generated from field: string oracle_base = 4;
   */
  oracleBase = "";

  /**
   * Oracle quote currency
   *
   * @generated from field: string oracle_quote = 5;
   */
  oracleQuote = "";

  /**
   * Oracle type
   *
   * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 6;
   */
  oracleType = OracleType.Unspecified;

  /**
   * Scale factor for oracle prices.
   *
   * @generated from field: uint32 oracle_scale_factor = 7;
   */
  oracleScaleFactor = 0;

  /**
   * Expiration time of the market
   *
   * @generated from field: int64 expiry = 8;
   */
  expiry = protoInt64.zero;

  /**
   * maker_fee_rate defines the trade fee rate for makers on the expiry futures
   * market
   *
   * @generated from field: string maker_fee_rate = 9;
   */
  makerFeeRate = "";

  /**
   * taker_fee_rate defines the trade fee rate for takers on the expiry futures
   * market
   *
   * @generated from field: string taker_fee_rate = 10;
   */
  takerFeeRate = "";

  /**
   * initial_margin_ratio defines the initial margin ratio for the derivative
   * market
   *
   * @generated from field: string initial_margin_ratio = 11;
   */
  initialMarginRatio = "";

  /**
   * maintenance_margin_ratio defines the maintenance margin ratio for the
   * derivative market
   *
   * @generated from field: string maintenance_margin_ratio = 12;
   */
  maintenanceMarginRatio = "";

  /**
   * min_price_tick_size defines the minimum tick size of the order's price and
   * margin
   *
   * @generated from field: string min_price_tick_size = 13;
   */
  minPriceTickSize = "";

  /**
   * min_quantity_tick_size defines the minimum tick size of the order's
   * quantity
   *
   * @generated from field: string min_quantity_tick_size = 14;
   */
  minQuantityTickSize = "";

  /**
   * min_notional defines the minimum notional (in quote asset) required for
   * orders in the market
   *
   * @generated from field: string min_notional = 15;
   */
  minNotional = "";

  constructor(data?: PartialMessage<MsgInstantExpiryFuturesMarketLaunch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 7, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "expiry", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "min_notional", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantExpiryFuturesMarketLaunch {
    return new MsgInstantExpiryFuturesMarketLaunch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantExpiryFuturesMarketLaunch {
    return new MsgInstantExpiryFuturesMarketLaunch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantExpiryFuturesMarketLaunch {
    return new MsgInstantExpiryFuturesMarketLaunch().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantExpiryFuturesMarketLaunch | PlainMessage<MsgInstantExpiryFuturesMarketLaunch> | undefined, b: MsgInstantExpiryFuturesMarketLaunch | PlainMessage<MsgInstantExpiryFuturesMarketLaunch> | undefined): boolean {
    return proto3.util.equals(MsgInstantExpiryFuturesMarketLaunch, a, b);
  }
}

/**
 * MsgInstantExpiryFuturesMarketLaunchResponse defines the
 * Msg/InstantExpiryFuturesMarketLaunch response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunchResponse
 */
export class MsgInstantExpiryFuturesMarketLaunchResponse extends Message<MsgInstantExpiryFuturesMarketLaunchResponse> {
  constructor(data?: PartialMessage<MsgInstantExpiryFuturesMarketLaunchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantExpiryFuturesMarketLaunchResponse {
    return new MsgInstantExpiryFuturesMarketLaunchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantExpiryFuturesMarketLaunchResponse {
    return new MsgInstantExpiryFuturesMarketLaunchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantExpiryFuturesMarketLaunchResponse {
    return new MsgInstantExpiryFuturesMarketLaunchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantExpiryFuturesMarketLaunchResponse | PlainMessage<MsgInstantExpiryFuturesMarketLaunchResponse> | undefined, b: MsgInstantExpiryFuturesMarketLaunchResponse | PlainMessage<MsgInstantExpiryFuturesMarketLaunchResponse> | undefined): boolean {
    return proto3.util.equals(MsgInstantExpiryFuturesMarketLaunchResponse, a, b);
  }
}

/**
 * MsgCreateSpotMarketOrder defines a SDK message for creating a new spot market
 * order.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotMarketOrder
 */
export class MsgCreateSpotMarketOrder extends Message<MsgCreateSpotMarketOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.exchange.v1beta1.SpotOrder order = 2;
   */
  order?: SpotOrder;

  constructor(data?: PartialMessage<MsgCreateSpotMarketOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateSpotMarketOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: SpotOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateSpotMarketOrder {
    return new MsgCreateSpotMarketOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateSpotMarketOrder {
    return new MsgCreateSpotMarketOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateSpotMarketOrder {
    return new MsgCreateSpotMarketOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateSpotMarketOrder | PlainMessage<MsgCreateSpotMarketOrder> | undefined, b: MsgCreateSpotMarketOrder | PlainMessage<MsgCreateSpotMarketOrder> | undefined): boolean {
    return proto3.util.equals(MsgCreateSpotMarketOrder, a, b);
  }
}

/**
 * MsgCreateSpotMarketOrderResponse defines the Msg/CreateSpotMarketLimitOrder
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse
 */
export class MsgCreateSpotMarketOrderResponse extends Message<MsgCreateSpotMarketOrderResponse> {
  /**
   * @generated from field: string order_hash = 1;
   */
  orderHash = "";

  /**
   * @generated from field: injective.exchange.v1beta1.SpotMarketOrderResults results = 2;
   */
  results?: SpotMarketOrderResults;

  /**
   * @generated from field: string cid = 3;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCreateSpotMarketOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: SpotMarketOrderResults },
    { no: 3, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateSpotMarketOrderResponse {
    return new MsgCreateSpotMarketOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateSpotMarketOrderResponse {
    return new MsgCreateSpotMarketOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateSpotMarketOrderResponse {
    return new MsgCreateSpotMarketOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateSpotMarketOrderResponse | PlainMessage<MsgCreateSpotMarketOrderResponse> | undefined, b: MsgCreateSpotMarketOrderResponse | PlainMessage<MsgCreateSpotMarketOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateSpotMarketOrderResponse, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.SpotMarketOrderResults
 */
export class SpotMarketOrderResults extends Message<SpotMarketOrderResults> {
  /**
   * @generated from field: string quantity = 1;
   */
  quantity = "";

  /**
   * @generated from field: string price = 2;
   */
  price = "";

  /**
   * @generated from field: string fee = 3;
   */
  fee = "";

  constructor(data?: PartialMessage<SpotMarketOrderResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.SpotMarketOrderResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotMarketOrderResults {
    return new SpotMarketOrderResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotMarketOrderResults {
    return new SpotMarketOrderResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotMarketOrderResults {
    return new SpotMarketOrderResults().fromJsonString(jsonString, options);
  }

  static equals(a: SpotMarketOrderResults | PlainMessage<SpotMarketOrderResults> | undefined, b: SpotMarketOrderResults | PlainMessage<SpotMarketOrderResults> | undefined): boolean {
    return proto3.util.equals(SpotMarketOrderResults, a, b);
  }
}

/**
 * A Cosmos-SDK MsgCreateDerivativeLimitOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder
 */
export class MsgCreateDerivativeLimitOrder extends Message<MsgCreateDerivativeLimitOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.exchange.v1beta1.DerivativeOrder order = 2;
   */
  order?: DerivativeOrder;

  constructor(data?: PartialMessage<MsgCreateDerivativeLimitOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDerivativeLimitOrder {
    return new MsgCreateDerivativeLimitOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDerivativeLimitOrder {
    return new MsgCreateDerivativeLimitOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDerivativeLimitOrder {
    return new MsgCreateDerivativeLimitOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDerivativeLimitOrder | PlainMessage<MsgCreateDerivativeLimitOrder> | undefined, b: MsgCreateDerivativeLimitOrder | PlainMessage<MsgCreateDerivativeLimitOrder> | undefined): boolean {
    return proto3.util.equals(MsgCreateDerivativeLimitOrder, a, b);
  }
}

/**
 * MsgCreateDerivativeLimitOrderResponse defines the
 * Msg/CreateDerivativeMarketOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse
 */
export class MsgCreateDerivativeLimitOrderResponse extends Message<MsgCreateDerivativeLimitOrderResponse> {
  /**
   * @generated from field: string order_hash = 1;
   */
  orderHash = "";

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCreateDerivativeLimitOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDerivativeLimitOrderResponse {
    return new MsgCreateDerivativeLimitOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDerivativeLimitOrderResponse {
    return new MsgCreateDerivativeLimitOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDerivativeLimitOrderResponse {
    return new MsgCreateDerivativeLimitOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDerivativeLimitOrderResponse | PlainMessage<MsgCreateDerivativeLimitOrderResponse> | undefined, b: MsgCreateDerivativeLimitOrderResponse | PlainMessage<MsgCreateDerivativeLimitOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateDerivativeLimitOrderResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgCreateBinaryOptionsLimitOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder
 */
export class MsgCreateBinaryOptionsLimitOrder extends Message<MsgCreateBinaryOptionsLimitOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.exchange.v1beta1.DerivativeOrder order = 2;
   */
  order?: DerivativeOrder;

  constructor(data?: PartialMessage<MsgCreateBinaryOptionsLimitOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateBinaryOptionsLimitOrder {
    return new MsgCreateBinaryOptionsLimitOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsLimitOrder {
    return new MsgCreateBinaryOptionsLimitOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsLimitOrder {
    return new MsgCreateBinaryOptionsLimitOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateBinaryOptionsLimitOrder | PlainMessage<MsgCreateBinaryOptionsLimitOrder> | undefined, b: MsgCreateBinaryOptionsLimitOrder | PlainMessage<MsgCreateBinaryOptionsLimitOrder> | undefined): boolean {
    return proto3.util.equals(MsgCreateBinaryOptionsLimitOrder, a, b);
  }
}

/**
 * MsgCreateBinaryOptionsLimitOrderResponse defines the
 * Msg/CreateBinaryOptionsLimitOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse
 */
export class MsgCreateBinaryOptionsLimitOrderResponse extends Message<MsgCreateBinaryOptionsLimitOrderResponse> {
  /**
   * @generated from field: string order_hash = 1;
   */
  orderHash = "";

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCreateBinaryOptionsLimitOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateBinaryOptionsLimitOrderResponse {
    return new MsgCreateBinaryOptionsLimitOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsLimitOrderResponse {
    return new MsgCreateBinaryOptionsLimitOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsLimitOrderResponse {
    return new MsgCreateBinaryOptionsLimitOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateBinaryOptionsLimitOrderResponse | PlainMessage<MsgCreateBinaryOptionsLimitOrderResponse> | undefined, b: MsgCreateBinaryOptionsLimitOrderResponse | PlainMessage<MsgCreateBinaryOptionsLimitOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateBinaryOptionsLimitOrderResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgBatchCreateDerivativeLimitOrders
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders
 */
export class MsgBatchCreateDerivativeLimitOrders extends Message<MsgBatchCreateDerivativeLimitOrders> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.exchange.v1beta1.DerivativeOrder orders = 2;
   */
  orders: DerivativeOrder[] = [];

  constructor(data?: PartialMessage<MsgBatchCreateDerivativeLimitOrders>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orders", kind: "message", T: DerivativeOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCreateDerivativeLimitOrders {
    return new MsgBatchCreateDerivativeLimitOrders().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCreateDerivativeLimitOrders {
    return new MsgBatchCreateDerivativeLimitOrders().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCreateDerivativeLimitOrders {
    return new MsgBatchCreateDerivativeLimitOrders().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCreateDerivativeLimitOrders | PlainMessage<MsgBatchCreateDerivativeLimitOrders> | undefined, b: MsgBatchCreateDerivativeLimitOrders | PlainMessage<MsgBatchCreateDerivativeLimitOrders> | undefined): boolean {
    return proto3.util.equals(MsgBatchCreateDerivativeLimitOrders, a, b);
  }
}

/**
 * MsgBatchCreateDerivativeLimitOrdersResponse defines the
 * Msg/BatchCreateDerivativeLimitOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse
 */
export class MsgBatchCreateDerivativeLimitOrdersResponse extends Message<MsgBatchCreateDerivativeLimitOrdersResponse> {
  /**
   * @generated from field: repeated string order_hashes = 1;
   */
  orderHashes: string[] = [];

  /**
   * @generated from field: repeated string created_orders_cids = 2;
   */
  createdOrdersCids: string[] = [];

  /**
   * @generated from field: repeated string failed_orders_cids = 3;
   */
  failedOrdersCids: string[] = [];

  constructor(data?: PartialMessage<MsgBatchCreateDerivativeLimitOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "created_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "failed_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCreateDerivativeLimitOrdersResponse {
    return new MsgBatchCreateDerivativeLimitOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCreateDerivativeLimitOrdersResponse {
    return new MsgBatchCreateDerivativeLimitOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCreateDerivativeLimitOrdersResponse {
    return new MsgBatchCreateDerivativeLimitOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCreateDerivativeLimitOrdersResponse | PlainMessage<MsgBatchCreateDerivativeLimitOrdersResponse> | undefined, b: MsgBatchCreateDerivativeLimitOrdersResponse | PlainMessage<MsgBatchCreateDerivativeLimitOrdersResponse> | undefined): boolean {
    return proto3.util.equals(MsgBatchCreateDerivativeLimitOrdersResponse, a, b);
  }
}

/**
 * MsgCancelSpotOrder defines the Msg/CancelSpotOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelSpotOrder
 */
export class MsgCancelSpotOrder extends Message<MsgCancelSpotOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string market_id = 2;
   */
  marketId = "";

  /**
   * @generated from field: string subaccount_id = 3;
   */
  subaccountId = "";

  /**
   * @generated from field: string order_hash = 4;
   */
  orderHash = "";

  /**
   * @generated from field: string cid = 5;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCancelSpotOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCancelSpotOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelSpotOrder {
    return new MsgCancelSpotOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelSpotOrder {
    return new MsgCancelSpotOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelSpotOrder {
    return new MsgCancelSpotOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelSpotOrder | PlainMessage<MsgCancelSpotOrder> | undefined, b: MsgCancelSpotOrder | PlainMessage<MsgCancelSpotOrder> | undefined): boolean {
    return proto3.util.equals(MsgCancelSpotOrder, a, b);
  }
}

/**
 * MsgCancelSpotOrderResponse defines the Msg/CancelSpotOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelSpotOrderResponse
 */
export class MsgCancelSpotOrderResponse extends Message<MsgCancelSpotOrderResponse> {
  constructor(data?: PartialMessage<MsgCancelSpotOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCancelSpotOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelSpotOrderResponse {
    return new MsgCancelSpotOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelSpotOrderResponse {
    return new MsgCancelSpotOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelSpotOrderResponse {
    return new MsgCancelSpotOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelSpotOrderResponse | PlainMessage<MsgCancelSpotOrderResponse> | undefined, b: MsgCancelSpotOrderResponse | PlainMessage<MsgCancelSpotOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelSpotOrderResponse, a, b);
  }
}

/**
 * MsgBatchCancelSpotOrders defines the Msg/BatchCancelSpotOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelSpotOrders
 */
export class MsgBatchCancelSpotOrders extends Message<MsgBatchCancelSpotOrders> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.exchange.v1beta1.OrderData data = 2;
   */
  data: OrderData[] = [];

  constructor(data?: PartialMessage<MsgBatchCancelSpotOrders>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCancelSpotOrders";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: OrderData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCancelSpotOrders {
    return new MsgBatchCancelSpotOrders().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCancelSpotOrders {
    return new MsgBatchCancelSpotOrders().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCancelSpotOrders {
    return new MsgBatchCancelSpotOrders().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCancelSpotOrders | PlainMessage<MsgBatchCancelSpotOrders> | undefined, b: MsgBatchCancelSpotOrders | PlainMessage<MsgBatchCancelSpotOrders> | undefined): boolean {
    return proto3.util.equals(MsgBatchCancelSpotOrders, a, b);
  }
}

/**
 * MsgBatchCancelSpotOrdersResponse defines the Msg/BatchCancelSpotOrders
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse
 */
export class MsgBatchCancelSpotOrdersResponse extends Message<MsgBatchCancelSpotOrdersResponse> {
  /**
   * @generated from field: repeated bool success = 1;
   */
  success: boolean[] = [];

  constructor(data?: PartialMessage<MsgBatchCancelSpotOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCancelSpotOrdersResponse {
    return new MsgBatchCancelSpotOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCancelSpotOrdersResponse {
    return new MsgBatchCancelSpotOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCancelSpotOrdersResponse {
    return new MsgBatchCancelSpotOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCancelSpotOrdersResponse | PlainMessage<MsgBatchCancelSpotOrdersResponse> | undefined, b: MsgBatchCancelSpotOrdersResponse | PlainMessage<MsgBatchCancelSpotOrdersResponse> | undefined): boolean {
    return proto3.util.equals(MsgBatchCancelSpotOrdersResponse, a, b);
  }
}

/**
 * MsgBatchCancelBinaryOptionsOrders defines the
 * Msg/BatchCancelBinaryOptionsOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders
 */
export class MsgBatchCancelBinaryOptionsOrders extends Message<MsgBatchCancelBinaryOptionsOrders> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.exchange.v1beta1.OrderData data = 2;
   */
  data: OrderData[] = [];

  constructor(data?: PartialMessage<MsgBatchCancelBinaryOptionsOrders>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: OrderData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCancelBinaryOptionsOrders {
    return new MsgBatchCancelBinaryOptionsOrders().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCancelBinaryOptionsOrders {
    return new MsgBatchCancelBinaryOptionsOrders().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCancelBinaryOptionsOrders {
    return new MsgBatchCancelBinaryOptionsOrders().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCancelBinaryOptionsOrders | PlainMessage<MsgBatchCancelBinaryOptionsOrders> | undefined, b: MsgBatchCancelBinaryOptionsOrders | PlainMessage<MsgBatchCancelBinaryOptionsOrders> | undefined): boolean {
    return proto3.util.equals(MsgBatchCancelBinaryOptionsOrders, a, b);
  }
}

/**
 * BatchCancelBinaryOptionsOrdersResponse defines the
 * Msg/BatchCancelBinaryOptionsOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse
 */
export class MsgBatchCancelBinaryOptionsOrdersResponse extends Message<MsgBatchCancelBinaryOptionsOrdersResponse> {
  /**
   * @generated from field: repeated bool success = 1;
   */
  success: boolean[] = [];

  constructor(data?: PartialMessage<MsgBatchCancelBinaryOptionsOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCancelBinaryOptionsOrdersResponse {
    return new MsgBatchCancelBinaryOptionsOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCancelBinaryOptionsOrdersResponse {
    return new MsgBatchCancelBinaryOptionsOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCancelBinaryOptionsOrdersResponse {
    return new MsgBatchCancelBinaryOptionsOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCancelBinaryOptionsOrdersResponse | PlainMessage<MsgBatchCancelBinaryOptionsOrdersResponse> | undefined, b: MsgBatchCancelBinaryOptionsOrdersResponse | PlainMessage<MsgBatchCancelBinaryOptionsOrdersResponse> | undefined): boolean {
    return proto3.util.equals(MsgBatchCancelBinaryOptionsOrdersResponse, a, b);
  }
}

/**
 * MsgBatchUpdateOrders defines the Msg/BatchUpdateOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchUpdateOrders
 */
export class MsgBatchUpdateOrders extends Message<MsgBatchUpdateOrders> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * subaccount_id only used for the spot_market_ids_to_cancel_all and
   * derivative_market_ids_to_cancel_all.
   *
   * @generated from field: string subaccount_id = 2;
   */
  subaccountId = "";

  /**
   * @generated from field: repeated string spot_market_ids_to_cancel_all = 3;
   */
  spotMarketIdsToCancelAll: string[] = [];

  /**
   * @generated from field: repeated string derivative_market_ids_to_cancel_all = 4;
   */
  derivativeMarketIdsToCancelAll: string[] = [];

  /**
   * @generated from field: repeated injective.exchange.v1beta1.OrderData spot_orders_to_cancel = 5;
   */
  spotOrdersToCancel: OrderData[] = [];

  /**
   * @generated from field: repeated injective.exchange.v1beta1.OrderData derivative_orders_to_cancel = 6;
   */
  derivativeOrdersToCancel: OrderData[] = [];

  /**
   * @generated from field: repeated injective.exchange.v1beta1.SpotOrder spot_orders_to_create = 7;
   */
  spotOrdersToCreate: SpotOrder[] = [];

  /**
   * @generated from field: repeated injective.exchange.v1beta1.DerivativeOrder derivative_orders_to_create = 8;
   */
  derivativeOrdersToCreate: DerivativeOrder[] = [];

  /**
   * @generated from field: repeated injective.exchange.v1beta1.OrderData binary_options_orders_to_cancel = 9;
   */
  binaryOptionsOrdersToCancel: OrderData[] = [];

  /**
   * @generated from field: repeated string binary_options_market_ids_to_cancel_all = 10;
   */
  binaryOptionsMarketIdsToCancelAll: string[] = [];

  /**
   * @generated from field: repeated injective.exchange.v1beta1.DerivativeOrder binary_options_orders_to_create = 11;
   */
  binaryOptionsOrdersToCreate: DerivativeOrder[] = [];

  constructor(data?: PartialMessage<MsgBatchUpdateOrders>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchUpdateOrders";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spot_market_ids_to_cancel_all", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "derivative_market_ids_to_cancel_all", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "spot_orders_to_cancel", kind: "message", T: OrderData, repeated: true },
    { no: 6, name: "derivative_orders_to_cancel", kind: "message", T: OrderData, repeated: true },
    { no: 7, name: "spot_orders_to_create", kind: "message", T: SpotOrder, repeated: true },
    { no: 8, name: "derivative_orders_to_create", kind: "message", T: DerivativeOrder, repeated: true },
    { no: 9, name: "binary_options_orders_to_cancel", kind: "message", T: OrderData, repeated: true },
    { no: 10, name: "binary_options_market_ids_to_cancel_all", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "binary_options_orders_to_create", kind: "message", T: DerivativeOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchUpdateOrders {
    return new MsgBatchUpdateOrders().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchUpdateOrders {
    return new MsgBatchUpdateOrders().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchUpdateOrders {
    return new MsgBatchUpdateOrders().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchUpdateOrders | PlainMessage<MsgBatchUpdateOrders> | undefined, b: MsgBatchUpdateOrders | PlainMessage<MsgBatchUpdateOrders> | undefined): boolean {
    return proto3.util.equals(MsgBatchUpdateOrders, a, b);
  }
}

/**
 * MsgBatchUpdateOrdersResponse defines the Msg/BatchUpdateOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse
 */
export class MsgBatchUpdateOrdersResponse extends Message<MsgBatchUpdateOrdersResponse> {
  /**
   * @generated from field: repeated bool spot_cancel_success = 1;
   */
  spotCancelSuccess: boolean[] = [];

  /**
   * @generated from field: repeated bool derivative_cancel_success = 2;
   */
  derivativeCancelSuccess: boolean[] = [];

  /**
   * @generated from field: repeated string spot_order_hashes = 3;
   */
  spotOrderHashes: string[] = [];

  /**
   * @generated from field: repeated string derivative_order_hashes = 4;
   */
  derivativeOrderHashes: string[] = [];

  /**
   * @generated from field: repeated bool binary_options_cancel_success = 5;
   */
  binaryOptionsCancelSuccess: boolean[] = [];

  /**
   * @generated from field: repeated string binary_options_order_hashes = 6;
   */
  binaryOptionsOrderHashes: string[] = [];

  /**
   * @generated from field: repeated string created_spot_orders_cids = 7;
   */
  createdSpotOrdersCids: string[] = [];

  /**
   * @generated from field: repeated string failed_spot_orders_cids = 8;
   */
  failedSpotOrdersCids: string[] = [];

  /**
   * @generated from field: repeated string created_derivative_orders_cids = 9;
   */
  createdDerivativeOrdersCids: string[] = [];

  /**
   * @generated from field: repeated string failed_derivative_orders_cids = 10;
   */
  failedDerivativeOrdersCids: string[] = [];

  /**
   * @generated from field: repeated string created_binary_options_orders_cids = 11;
   */
  createdBinaryOptionsOrdersCids: string[] = [];

  /**
   * @generated from field: repeated string failed_binary_options_orders_cids = 12;
   */
  failedBinaryOptionsOrdersCids: string[] = [];

  constructor(data?: PartialMessage<MsgBatchUpdateOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_cancel_success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 2, name: "derivative_cancel_success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 3, name: "spot_order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "derivative_order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "binary_options_cancel_success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 6, name: "binary_options_order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "created_spot_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "failed_spot_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "created_derivative_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "failed_derivative_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "created_binary_options_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "failed_binary_options_orders_cids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchUpdateOrdersResponse {
    return new MsgBatchUpdateOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchUpdateOrdersResponse {
    return new MsgBatchUpdateOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchUpdateOrdersResponse {
    return new MsgBatchUpdateOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchUpdateOrdersResponse | PlainMessage<MsgBatchUpdateOrdersResponse> | undefined, b: MsgBatchUpdateOrdersResponse | PlainMessage<MsgBatchUpdateOrdersResponse> | undefined): boolean {
    return proto3.util.equals(MsgBatchUpdateOrdersResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgCreateDerivativeMarketOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder
 */
export class MsgCreateDerivativeMarketOrder extends Message<MsgCreateDerivativeMarketOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.exchange.v1beta1.DerivativeOrder order = 2;
   */
  order?: DerivativeOrder;

  constructor(data?: PartialMessage<MsgCreateDerivativeMarketOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDerivativeMarketOrder {
    return new MsgCreateDerivativeMarketOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDerivativeMarketOrder {
    return new MsgCreateDerivativeMarketOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDerivativeMarketOrder {
    return new MsgCreateDerivativeMarketOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDerivativeMarketOrder | PlainMessage<MsgCreateDerivativeMarketOrder> | undefined, b: MsgCreateDerivativeMarketOrder | PlainMessage<MsgCreateDerivativeMarketOrder> | undefined): boolean {
    return proto3.util.equals(MsgCreateDerivativeMarketOrder, a, b);
  }
}

/**
 * MsgCreateDerivativeMarketOrderResponse defines the
 * Msg/CreateDerivativeMarketOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse
 */
export class MsgCreateDerivativeMarketOrderResponse extends Message<MsgCreateDerivativeMarketOrderResponse> {
  /**
   * @generated from field: string order_hash = 1;
   */
  orderHash = "";

  /**
   * @generated from field: injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2;
   */
  results?: DerivativeMarketOrderResults;

  /**
   * @generated from field: string cid = 3;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCreateDerivativeMarketOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: DerivativeMarketOrderResults },
    { no: 3, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDerivativeMarketOrderResponse {
    return new MsgCreateDerivativeMarketOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDerivativeMarketOrderResponse {
    return new MsgCreateDerivativeMarketOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDerivativeMarketOrderResponse {
    return new MsgCreateDerivativeMarketOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDerivativeMarketOrderResponse | PlainMessage<MsgCreateDerivativeMarketOrderResponse> | undefined, b: MsgCreateDerivativeMarketOrderResponse | PlainMessage<MsgCreateDerivativeMarketOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateDerivativeMarketOrderResponse, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.DerivativeMarketOrderResults
 */
export class DerivativeMarketOrderResults extends Message<DerivativeMarketOrderResults> {
  /**
   * @generated from field: string quantity = 1;
   */
  quantity = "";

  /**
   * @generated from field: string price = 2;
   */
  price = "";

  /**
   * @generated from field: string fee = 3;
   */
  fee = "";

  /**
   * @generated from field: injective.exchange.v1beta1.PositionDelta position_delta = 4;
   */
  positionDelta?: PositionDelta;

  /**
   * @generated from field: string payout = 5;
   */
  payout = "";

  constructor(data?: PartialMessage<DerivativeMarketOrderResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.DerivativeMarketOrderResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "position_delta", kind: "message", T: PositionDelta },
    { no: 5, name: "payout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DerivativeMarketOrderResults {
    return new DerivativeMarketOrderResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DerivativeMarketOrderResults {
    return new DerivativeMarketOrderResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DerivativeMarketOrderResults {
    return new DerivativeMarketOrderResults().fromJsonString(jsonString, options);
  }

  static equals(a: DerivativeMarketOrderResults | PlainMessage<DerivativeMarketOrderResults> | undefined, b: DerivativeMarketOrderResults | PlainMessage<DerivativeMarketOrderResults> | undefined): boolean {
    return proto3.util.equals(DerivativeMarketOrderResults, a, b);
  }
}

/**
 * A Cosmos-SDK MsgCreateBinaryOptionsMarketOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder
 */
export class MsgCreateBinaryOptionsMarketOrder extends Message<MsgCreateBinaryOptionsMarketOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.exchange.v1beta1.DerivativeOrder order = 2;
   */
  order?: DerivativeOrder;

  constructor(data?: PartialMessage<MsgCreateBinaryOptionsMarketOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateBinaryOptionsMarketOrder {
    return new MsgCreateBinaryOptionsMarketOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsMarketOrder {
    return new MsgCreateBinaryOptionsMarketOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsMarketOrder {
    return new MsgCreateBinaryOptionsMarketOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateBinaryOptionsMarketOrder | PlainMessage<MsgCreateBinaryOptionsMarketOrder> | undefined, b: MsgCreateBinaryOptionsMarketOrder | PlainMessage<MsgCreateBinaryOptionsMarketOrder> | undefined): boolean {
    return proto3.util.equals(MsgCreateBinaryOptionsMarketOrder, a, b);
  }
}

/**
 * MsgCreateBinaryOptionsMarketOrderResponse defines the
 * Msg/CreateBinaryOptionsMarketOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse
 */
export class MsgCreateBinaryOptionsMarketOrderResponse extends Message<MsgCreateBinaryOptionsMarketOrderResponse> {
  /**
   * @generated from field: string order_hash = 1;
   */
  orderHash = "";

  /**
   * @generated from field: injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2;
   */
  results?: DerivativeMarketOrderResults;

  /**
   * @generated from field: string cid = 3;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCreateBinaryOptionsMarketOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: DerivativeMarketOrderResults },
    { no: 3, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateBinaryOptionsMarketOrderResponse {
    return new MsgCreateBinaryOptionsMarketOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsMarketOrderResponse {
    return new MsgCreateBinaryOptionsMarketOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateBinaryOptionsMarketOrderResponse {
    return new MsgCreateBinaryOptionsMarketOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateBinaryOptionsMarketOrderResponse | PlainMessage<MsgCreateBinaryOptionsMarketOrderResponse> | undefined, b: MsgCreateBinaryOptionsMarketOrderResponse | PlainMessage<MsgCreateBinaryOptionsMarketOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateBinaryOptionsMarketOrderResponse, a, b);
  }
}

/**
 * MsgCancelDerivativeOrder defines the Msg/CancelDerivativeOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelDerivativeOrder
 */
export class MsgCancelDerivativeOrder extends Message<MsgCancelDerivativeOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string market_id = 2;
   */
  marketId = "";

  /**
   * @generated from field: string subaccount_id = 3;
   */
  subaccountId = "";

  /**
   * @generated from field: string order_hash = 4;
   */
  orderHash = "";

  /**
   * bitwise combination of OrderMask enum values
   *
   * @generated from field: int32 order_mask = 5;
   */
  orderMask = 0;

  /**
   * @generated from field: string cid = 6;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCancelDerivativeOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCancelDerivativeOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_mask", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelDerivativeOrder {
    return new MsgCancelDerivativeOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelDerivativeOrder {
    return new MsgCancelDerivativeOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelDerivativeOrder {
    return new MsgCancelDerivativeOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelDerivativeOrder | PlainMessage<MsgCancelDerivativeOrder> | undefined, b: MsgCancelDerivativeOrder | PlainMessage<MsgCancelDerivativeOrder> | undefined): boolean {
    return proto3.util.equals(MsgCancelDerivativeOrder, a, b);
  }
}

/**
 * MsgCancelDerivativeOrderResponse defines the
 * Msg/CancelDerivativeOrderResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelDerivativeOrderResponse
 */
export class MsgCancelDerivativeOrderResponse extends Message<MsgCancelDerivativeOrderResponse> {
  constructor(data?: PartialMessage<MsgCancelDerivativeOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCancelDerivativeOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelDerivativeOrderResponse {
    return new MsgCancelDerivativeOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelDerivativeOrderResponse {
    return new MsgCancelDerivativeOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelDerivativeOrderResponse {
    return new MsgCancelDerivativeOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelDerivativeOrderResponse | PlainMessage<MsgCancelDerivativeOrderResponse> | undefined, b: MsgCancelDerivativeOrderResponse | PlainMessage<MsgCancelDerivativeOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelDerivativeOrderResponse, a, b);
  }
}

/**
 * MsgCancelBinaryOptionsOrder defines the Msg/CancelBinaryOptionsOrder response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder
 */
export class MsgCancelBinaryOptionsOrder extends Message<MsgCancelBinaryOptionsOrder> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string market_id = 2;
   */
  marketId = "";

  /**
   * @generated from field: string subaccount_id = 3;
   */
  subaccountId = "";

  /**
   * @generated from field: string order_hash = 4;
   */
  orderHash = "";

  /**
   * bitwise combination of OrderMask enum values
   *
   * @generated from field: int32 order_mask = 5;
   */
  orderMask = 0;

  /**
   * @generated from field: string cid = 6;
   */
  cid = "";

  constructor(data?: PartialMessage<MsgCancelBinaryOptionsOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_mask", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelBinaryOptionsOrder {
    return new MsgCancelBinaryOptionsOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelBinaryOptionsOrder {
    return new MsgCancelBinaryOptionsOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelBinaryOptionsOrder {
    return new MsgCancelBinaryOptionsOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelBinaryOptionsOrder | PlainMessage<MsgCancelBinaryOptionsOrder> | undefined, b: MsgCancelBinaryOptionsOrder | PlainMessage<MsgCancelBinaryOptionsOrder> | undefined): boolean {
    return proto3.util.equals(MsgCancelBinaryOptionsOrder, a, b);
  }
}

/**
 * MsgCancelBinaryOptionsOrderResponse defines the
 * Msg/CancelBinaryOptionsOrderResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelBinaryOptionsOrderResponse
 */
export class MsgCancelBinaryOptionsOrderResponse extends Message<MsgCancelBinaryOptionsOrderResponse> {
  constructor(data?: PartialMessage<MsgCancelBinaryOptionsOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelBinaryOptionsOrderResponse {
    return new MsgCancelBinaryOptionsOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelBinaryOptionsOrderResponse {
    return new MsgCancelBinaryOptionsOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelBinaryOptionsOrderResponse {
    return new MsgCancelBinaryOptionsOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelBinaryOptionsOrderResponse | PlainMessage<MsgCancelBinaryOptionsOrderResponse> | undefined, b: MsgCancelBinaryOptionsOrderResponse | PlainMessage<MsgCancelBinaryOptionsOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelBinaryOptionsOrderResponse, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.OrderData
 */
export class OrderData extends Message<OrderData> {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId = "";

  /**
   * @generated from field: string subaccount_id = 2;
   */
  subaccountId = "";

  /**
   * @generated from field: string order_hash = 3;
   */
  orderHash = "";

  /**
   * bitwise combination of OrderMask enum values
   *
   * @generated from field: int32 order_mask = 4;
   */
  orderMask = 0;

  /**
   * @generated from field: string cid = 5;
   */
  cid = "";

  constructor(data?: PartialMessage<OrderData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.OrderData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_mask", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderData {
    return new OrderData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderData {
    return new OrderData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderData {
    return new OrderData().fromJsonString(jsonString, options);
  }

  static equals(a: OrderData | PlainMessage<OrderData> | undefined, b: OrderData | PlainMessage<OrderData> | undefined): boolean {
    return proto3.util.equals(OrderData, a, b);
  }
}

/**
 * MsgBatchCancelDerivativeOrders defines the Msg/CancelDerivativeOrders
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders
 */
export class MsgBatchCancelDerivativeOrders extends Message<MsgBatchCancelDerivativeOrders> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.exchange.v1beta1.OrderData data = 2;
   */
  data: OrderData[] = [];

  constructor(data?: PartialMessage<MsgBatchCancelDerivativeOrders>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: OrderData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCancelDerivativeOrders {
    return new MsgBatchCancelDerivativeOrders().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCancelDerivativeOrders {
    return new MsgBatchCancelDerivativeOrders().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCancelDerivativeOrders {
    return new MsgBatchCancelDerivativeOrders().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCancelDerivativeOrders | PlainMessage<MsgBatchCancelDerivativeOrders> | undefined, b: MsgBatchCancelDerivativeOrders | PlainMessage<MsgBatchCancelDerivativeOrders> | undefined): boolean {
    return proto3.util.equals(MsgBatchCancelDerivativeOrders, a, b);
  }
}

/**
 * MsgBatchCancelDerivativeOrdersResponse defines the
 * Msg/CancelDerivativeOrderResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse
 */
export class MsgBatchCancelDerivativeOrdersResponse extends Message<MsgBatchCancelDerivativeOrdersResponse> {
  /**
   * @generated from field: repeated bool success = 1;
   */
  success: boolean[] = [];

  constructor(data?: PartialMessage<MsgBatchCancelDerivativeOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBatchCancelDerivativeOrdersResponse {
    return new MsgBatchCancelDerivativeOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBatchCancelDerivativeOrdersResponse {
    return new MsgBatchCancelDerivativeOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBatchCancelDerivativeOrdersResponse {
    return new MsgBatchCancelDerivativeOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBatchCancelDerivativeOrdersResponse | PlainMessage<MsgBatchCancelDerivativeOrdersResponse> | undefined, b: MsgBatchCancelDerivativeOrdersResponse | PlainMessage<MsgBatchCancelDerivativeOrdersResponse> | undefined): boolean {
    return proto3.util.equals(MsgBatchCancelDerivativeOrdersResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgSubaccountTransfer
 *
 * @generated from message injective.exchange.v1beta1.MsgSubaccountTransfer
 */
export class MsgSubaccountTransfer extends Message<MsgSubaccountTransfer> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string source_subaccount_id = 2;
   */
  sourceSubaccountId = "";

  /**
   * @generated from field: string destination_subaccount_id = 3;
   */
  destinationSubaccountId = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgSubaccountTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgSubaccountTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubaccountTransfer {
    return new MsgSubaccountTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubaccountTransfer {
    return new MsgSubaccountTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubaccountTransfer {
    return new MsgSubaccountTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubaccountTransfer | PlainMessage<MsgSubaccountTransfer> | undefined, b: MsgSubaccountTransfer | PlainMessage<MsgSubaccountTransfer> | undefined): boolean {
    return proto3.util.equals(MsgSubaccountTransfer, a, b);
  }
}

/**
 * MsgSubaccountTransferResponse defines the Msg/SubaccountTransfer response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgSubaccountTransferResponse
 */
export class MsgSubaccountTransferResponse extends Message<MsgSubaccountTransferResponse> {
  constructor(data?: PartialMessage<MsgSubaccountTransferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgSubaccountTransferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubaccountTransferResponse {
    return new MsgSubaccountTransferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubaccountTransferResponse {
    return new MsgSubaccountTransferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubaccountTransferResponse {
    return new MsgSubaccountTransferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubaccountTransferResponse | PlainMessage<MsgSubaccountTransferResponse> | undefined, b: MsgSubaccountTransferResponse | PlainMessage<MsgSubaccountTransferResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubaccountTransferResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgExternalTransfer
 *
 * @generated from message injective.exchange.v1beta1.MsgExternalTransfer
 */
export class MsgExternalTransfer extends Message<MsgExternalTransfer> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string source_subaccount_id = 2;
   */
  sourceSubaccountId = "";

  /**
   * @generated from field: string destination_subaccount_id = 3;
   */
  destinationSubaccountId = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgExternalTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgExternalTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExternalTransfer {
    return new MsgExternalTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExternalTransfer {
    return new MsgExternalTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExternalTransfer {
    return new MsgExternalTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExternalTransfer | PlainMessage<MsgExternalTransfer> | undefined, b: MsgExternalTransfer | PlainMessage<MsgExternalTransfer> | undefined): boolean {
    return proto3.util.equals(MsgExternalTransfer, a, b);
  }
}

/**
 * MsgExternalTransferResponse defines the Msg/ExternalTransfer response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgExternalTransferResponse
 */
export class MsgExternalTransferResponse extends Message<MsgExternalTransferResponse> {
  constructor(data?: PartialMessage<MsgExternalTransferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgExternalTransferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExternalTransferResponse {
    return new MsgExternalTransferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExternalTransferResponse {
    return new MsgExternalTransferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExternalTransferResponse {
    return new MsgExternalTransferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExternalTransferResponse | PlainMessage<MsgExternalTransferResponse> | undefined, b: MsgExternalTransferResponse | PlainMessage<MsgExternalTransferResponse> | undefined): boolean {
    return proto3.util.equals(MsgExternalTransferResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgLiquidatePosition
 *
 * @generated from message injective.exchange.v1beta1.MsgLiquidatePosition
 */
export class MsgLiquidatePosition extends Message<MsgLiquidatePosition> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string subaccount_id = 2;
   */
  subaccountId = "";

  /**
   * @generated from field: string market_id = 3;
   */
  marketId = "";

  /**
   * optional order to provide for liquidation
   *
   * @generated from field: injective.exchange.v1beta1.DerivativeOrder order = 4;
   */
  order?: DerivativeOrder;

  constructor(data?: PartialMessage<MsgLiquidatePosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgLiquidatePosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order", kind: "message", T: DerivativeOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLiquidatePosition {
    return new MsgLiquidatePosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLiquidatePosition {
    return new MsgLiquidatePosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLiquidatePosition {
    return new MsgLiquidatePosition().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLiquidatePosition | PlainMessage<MsgLiquidatePosition> | undefined, b: MsgLiquidatePosition | PlainMessage<MsgLiquidatePosition> | undefined): boolean {
    return proto3.util.equals(MsgLiquidatePosition, a, b);
  }
}

/**
 * MsgLiquidatePositionResponse defines the Msg/LiquidatePosition response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgLiquidatePositionResponse
 */
export class MsgLiquidatePositionResponse extends Message<MsgLiquidatePositionResponse> {
  constructor(data?: PartialMessage<MsgLiquidatePositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgLiquidatePositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLiquidatePositionResponse {
    return new MsgLiquidatePositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLiquidatePositionResponse {
    return new MsgLiquidatePositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLiquidatePositionResponse {
    return new MsgLiquidatePositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLiquidatePositionResponse | PlainMessage<MsgLiquidatePositionResponse> | undefined, b: MsgLiquidatePositionResponse | PlainMessage<MsgLiquidatePositionResponse> | undefined): boolean {
    return proto3.util.equals(MsgLiquidatePositionResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgEmergencySettleMarket
 *
 * @generated from message injective.exchange.v1beta1.MsgEmergencySettleMarket
 */
export class MsgEmergencySettleMarket extends Message<MsgEmergencySettleMarket> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string subaccount_id = 2;
   */
  subaccountId = "";

  /**
   * @generated from field: string market_id = 3;
   */
  marketId = "";

  constructor(data?: PartialMessage<MsgEmergencySettleMarket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgEmergencySettleMarket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEmergencySettleMarket {
    return new MsgEmergencySettleMarket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEmergencySettleMarket {
    return new MsgEmergencySettleMarket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEmergencySettleMarket {
    return new MsgEmergencySettleMarket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEmergencySettleMarket | PlainMessage<MsgEmergencySettleMarket> | undefined, b: MsgEmergencySettleMarket | PlainMessage<MsgEmergencySettleMarket> | undefined): boolean {
    return proto3.util.equals(MsgEmergencySettleMarket, a, b);
  }
}

/**
 * MsgEmergencySettleMarketResponse defines the Msg/EmergencySettleMarket
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgEmergencySettleMarketResponse
 */
export class MsgEmergencySettleMarketResponse extends Message<MsgEmergencySettleMarketResponse> {
  constructor(data?: PartialMessage<MsgEmergencySettleMarketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgEmergencySettleMarketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEmergencySettleMarketResponse {
    return new MsgEmergencySettleMarketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEmergencySettleMarketResponse {
    return new MsgEmergencySettleMarketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEmergencySettleMarketResponse {
    return new MsgEmergencySettleMarketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEmergencySettleMarketResponse | PlainMessage<MsgEmergencySettleMarketResponse> | undefined, b: MsgEmergencySettleMarketResponse | PlainMessage<MsgEmergencySettleMarketResponse> | undefined): boolean {
    return proto3.util.equals(MsgEmergencySettleMarketResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgIncreasePositionMargin
 *
 * @generated from message injective.exchange.v1beta1.MsgIncreasePositionMargin
 */
export class MsgIncreasePositionMargin extends Message<MsgIncreasePositionMargin> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string source_subaccount_id = 2;
   */
  sourceSubaccountId = "";

  /**
   * @generated from field: string destination_subaccount_id = 3;
   */
  destinationSubaccountId = "";

  /**
   * @generated from field: string market_id = 4;
   */
  marketId = "";

  /**
   * amount defines the amount of margin to add to the position
   *
   * @generated from field: string amount = 5;
   */
  amount = "";

  constructor(data?: PartialMessage<MsgIncreasePositionMargin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgIncreasePositionMargin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIncreasePositionMargin {
    return new MsgIncreasePositionMargin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIncreasePositionMargin {
    return new MsgIncreasePositionMargin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIncreasePositionMargin {
    return new MsgIncreasePositionMargin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIncreasePositionMargin | PlainMessage<MsgIncreasePositionMargin> | undefined, b: MsgIncreasePositionMargin | PlainMessage<MsgIncreasePositionMargin> | undefined): boolean {
    return proto3.util.equals(MsgIncreasePositionMargin, a, b);
  }
}

/**
 * MsgIncreasePositionMarginResponse defines the Msg/IncreasePositionMargin
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgIncreasePositionMarginResponse
 */
export class MsgIncreasePositionMarginResponse extends Message<MsgIncreasePositionMarginResponse> {
  constructor(data?: PartialMessage<MsgIncreasePositionMarginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgIncreasePositionMarginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIncreasePositionMarginResponse {
    return new MsgIncreasePositionMarginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIncreasePositionMarginResponse {
    return new MsgIncreasePositionMarginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIncreasePositionMarginResponse {
    return new MsgIncreasePositionMarginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIncreasePositionMarginResponse | PlainMessage<MsgIncreasePositionMarginResponse> | undefined, b: MsgIncreasePositionMarginResponse | PlainMessage<MsgIncreasePositionMarginResponse> | undefined): boolean {
    return proto3.util.equals(MsgIncreasePositionMarginResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgDecreasePositionMargin
 *
 * @generated from message injective.exchange.v1beta1.MsgDecreasePositionMargin
 */
export class MsgDecreasePositionMargin extends Message<MsgDecreasePositionMargin> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string source_subaccount_id = 2;
   */
  sourceSubaccountId = "";

  /**
   * @generated from field: string destination_subaccount_id = 3;
   */
  destinationSubaccountId = "";

  /**
   * @generated from field: string market_id = 4;
   */
  marketId = "";

  /**
   * amount defines the amount of margin to withdraw from the position
   *
   * @generated from field: string amount = 5;
   */
  amount = "";

  constructor(data?: PartialMessage<MsgDecreasePositionMargin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgDecreasePositionMargin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDecreasePositionMargin {
    return new MsgDecreasePositionMargin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDecreasePositionMargin {
    return new MsgDecreasePositionMargin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDecreasePositionMargin {
    return new MsgDecreasePositionMargin().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDecreasePositionMargin | PlainMessage<MsgDecreasePositionMargin> | undefined, b: MsgDecreasePositionMargin | PlainMessage<MsgDecreasePositionMargin> | undefined): boolean {
    return proto3.util.equals(MsgDecreasePositionMargin, a, b);
  }
}

/**
 * MsgDecreasePositionMarginResponse defines the Msg/MsgDecreasePositionMargin
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgDecreasePositionMarginResponse
 */
export class MsgDecreasePositionMarginResponse extends Message<MsgDecreasePositionMarginResponse> {
  constructor(data?: PartialMessage<MsgDecreasePositionMarginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgDecreasePositionMarginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDecreasePositionMarginResponse {
    return new MsgDecreasePositionMarginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDecreasePositionMarginResponse {
    return new MsgDecreasePositionMarginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDecreasePositionMarginResponse {
    return new MsgDecreasePositionMarginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDecreasePositionMarginResponse | PlainMessage<MsgDecreasePositionMarginResponse> | undefined, b: MsgDecreasePositionMarginResponse | PlainMessage<MsgDecreasePositionMarginResponse> | undefined): boolean {
    return proto3.util.equals(MsgDecreasePositionMarginResponse, a, b);
  }
}

/**
 * MsgPrivilegedExecuteContract defines the Msg/Exec message type
 *
 * @generated from message injective.exchange.v1beta1.MsgPrivilegedExecuteContract
 */
export class MsgPrivilegedExecuteContract extends Message<MsgPrivilegedExecuteContract> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * funds defines the user's bank coins used to fund the execution (e.g.
   * 100inj).
   *
   * @generated from field: string funds = 2;
   */
  funds = "";

  /**
   * contract_address defines the contract address to execute
   *
   * @generated from field: string contract_address = 3;
   */
  contractAddress = "";

  /**
   * data defines the call data used when executing the contract
   *
   * @generated from field: string data = 4;
   */
  data = "";

  constructor(data?: PartialMessage<MsgPrivilegedExecuteContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgPrivilegedExecuteContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "funds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPrivilegedExecuteContract {
    return new MsgPrivilegedExecuteContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPrivilegedExecuteContract {
    return new MsgPrivilegedExecuteContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPrivilegedExecuteContract {
    return new MsgPrivilegedExecuteContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPrivilegedExecuteContract | PlainMessage<MsgPrivilegedExecuteContract> | undefined, b: MsgPrivilegedExecuteContract | PlainMessage<MsgPrivilegedExecuteContract> | undefined): boolean {
    return proto3.util.equals(MsgPrivilegedExecuteContract, a, b);
  }
}

/**
 * MsgPrivilegedExecuteContractResponse defines the Msg/Exec response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse
 */
export class MsgPrivilegedExecuteContractResponse extends Message<MsgPrivilegedExecuteContractResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds_diff = 1;
   */
  fundsDiff: Coin[] = [];

  constructor(data?: PartialMessage<MsgPrivilegedExecuteContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "funds_diff", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPrivilegedExecuteContractResponse {
    return new MsgPrivilegedExecuteContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPrivilegedExecuteContractResponse {
    return new MsgPrivilegedExecuteContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPrivilegedExecuteContractResponse {
    return new MsgPrivilegedExecuteContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPrivilegedExecuteContractResponse | PlainMessage<MsgPrivilegedExecuteContractResponse> | undefined, b: MsgPrivilegedExecuteContractResponse | PlainMessage<MsgPrivilegedExecuteContractResponse> | undefined): boolean {
    return proto3.util.equals(MsgPrivilegedExecuteContractResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgRewardsOptOut
 *
 * @generated from message injective.exchange.v1beta1.MsgRewardsOptOut
 */
export class MsgRewardsOptOut extends Message<MsgRewardsOptOut> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgRewardsOptOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgRewardsOptOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRewardsOptOut {
    return new MsgRewardsOptOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRewardsOptOut {
    return new MsgRewardsOptOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRewardsOptOut {
    return new MsgRewardsOptOut().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRewardsOptOut | PlainMessage<MsgRewardsOptOut> | undefined, b: MsgRewardsOptOut | PlainMessage<MsgRewardsOptOut> | undefined): boolean {
    return proto3.util.equals(MsgRewardsOptOut, a, b);
  }
}

/**
 * MsgRewardsOptOutResponse defines the Msg/RewardsOptOut response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgRewardsOptOutResponse
 */
export class MsgRewardsOptOutResponse extends Message<MsgRewardsOptOutResponse> {
  constructor(data?: PartialMessage<MsgRewardsOptOutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgRewardsOptOutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRewardsOptOutResponse {
    return new MsgRewardsOptOutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRewardsOptOutResponse {
    return new MsgRewardsOptOutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRewardsOptOutResponse {
    return new MsgRewardsOptOutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRewardsOptOutResponse | PlainMessage<MsgRewardsOptOutResponse> | undefined, b: MsgRewardsOptOutResponse | PlainMessage<MsgRewardsOptOutResponse> | undefined): boolean {
    return proto3.util.equals(MsgRewardsOptOutResponse, a, b);
  }
}

/**
 * A Cosmos-SDK MsgReclaimLockedFunds
 *
 * @generated from message injective.exchange.v1beta1.MsgReclaimLockedFunds
 */
export class MsgReclaimLockedFunds extends Message<MsgReclaimLockedFunds> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: bytes lockedAccountPubKey = 2;
   */
  lockedAccountPubKey = new Uint8Array(0);

  /**
   * @generated from field: bytes signature = 3;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgReclaimLockedFunds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgReclaimLockedFunds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockedAccountPubKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgReclaimLockedFunds {
    return new MsgReclaimLockedFunds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgReclaimLockedFunds {
    return new MsgReclaimLockedFunds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgReclaimLockedFunds {
    return new MsgReclaimLockedFunds().fromJsonString(jsonString, options);
  }

  static equals(a: MsgReclaimLockedFunds | PlainMessage<MsgReclaimLockedFunds> | undefined, b: MsgReclaimLockedFunds | PlainMessage<MsgReclaimLockedFunds> | undefined): boolean {
    return proto3.util.equals(MsgReclaimLockedFunds, a, b);
  }
}

/**
 * MsgReclaimLockedFundsResponse defines the Msg/ReclaimLockedFunds response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgReclaimLockedFundsResponse
 */
export class MsgReclaimLockedFundsResponse extends Message<MsgReclaimLockedFundsResponse> {
  constructor(data?: PartialMessage<MsgReclaimLockedFundsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgReclaimLockedFundsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgReclaimLockedFundsResponse {
    return new MsgReclaimLockedFundsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgReclaimLockedFundsResponse {
    return new MsgReclaimLockedFundsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgReclaimLockedFundsResponse {
    return new MsgReclaimLockedFundsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgReclaimLockedFundsResponse | PlainMessage<MsgReclaimLockedFundsResponse> | undefined, b: MsgReclaimLockedFundsResponse | PlainMessage<MsgReclaimLockedFundsResponse> | undefined): boolean {
    return proto3.util.equals(MsgReclaimLockedFundsResponse, a, b);
  }
}

/**
 * MsgSignData defines an arbitrary, general-purpose, off-chain message
 *
 * @generated from message injective.exchange.v1beta1.MsgSignData
 */
export class MsgSignData extends Message<MsgSignData> {
  /**
   * Signer is the sdk.AccAddress of the message signer
   *
   * @generated from field: bytes Signer = 1;
   */
  Signer = new Uint8Array(0);

  /**
   * Data represents the raw bytes of the content that is signed (text, json,
   * etc)
   *
   * @generated from field: bytes Data = 2;
   */
  Data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgSignData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgSignData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Signer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "Data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSignData {
    return new MsgSignData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSignData {
    return new MsgSignData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSignData {
    return new MsgSignData().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSignData | PlainMessage<MsgSignData> | undefined, b: MsgSignData | PlainMessage<MsgSignData> | undefined): boolean {
    return proto3.util.equals(MsgSignData, a, b);
  }
}

/**
 * MsgSignDoc defines an arbitrary, general-purpose, off-chain message
 *
 * @generated from message injective.exchange.v1beta1.MsgSignDoc
 */
export class MsgSignDoc extends Message<MsgSignDoc> {
  /**
   * @generated from field: string sign_type = 1;
   */
  signType = "";

  /**
   * @generated from field: injective.exchange.v1beta1.MsgSignData value = 2;
   */
  value?: MsgSignData;

  constructor(data?: PartialMessage<MsgSignDoc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgSignDoc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sign_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: MsgSignData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSignDoc {
    return new MsgSignDoc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSignDoc {
    return new MsgSignDoc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSignDoc {
    return new MsgSignDoc().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSignDoc | PlainMessage<MsgSignDoc> | undefined, b: MsgSignDoc | PlainMessage<MsgSignDoc> | undefined): boolean {
    return proto3.util.equals(MsgSignDoc, a, b);
  }
}

/**
 * MsgAdminUpdateBinaryOptionsMarket is used by the market Admin to operate the
 * market
 *
 * @generated from message injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket
 */
export class MsgAdminUpdateBinaryOptionsMarket extends Message<MsgAdminUpdateBinaryOptionsMarket> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string market_id = 2;
   */
  marketId = "";

  /**
   * new price at which market will be settled
   *
   * @generated from field: string settlement_price = 3;
   */
  settlementPrice = "";

  /**
   * expiration timestamp
   *
   * @generated from field: int64 expiration_timestamp = 4;
   */
  expirationTimestamp = protoInt64.zero;

  /**
   * expiration timestamp
   *
   * @generated from field: int64 settlement_timestamp = 5;
   */
  settlementTimestamp = protoInt64.zero;

  /**
   * Status of the market
   *
   * @generated from field: injective.exchange.v1beta1.MarketStatus status = 6;
   */
  status = MarketStatus.Unspecified;

  constructor(data?: PartialMessage<MsgAdminUpdateBinaryOptionsMarket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "settlement_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiration_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "settlement_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(MarketStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAdminUpdateBinaryOptionsMarket {
    return new MsgAdminUpdateBinaryOptionsMarket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAdminUpdateBinaryOptionsMarket {
    return new MsgAdminUpdateBinaryOptionsMarket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAdminUpdateBinaryOptionsMarket {
    return new MsgAdminUpdateBinaryOptionsMarket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAdminUpdateBinaryOptionsMarket | PlainMessage<MsgAdminUpdateBinaryOptionsMarket> | undefined, b: MsgAdminUpdateBinaryOptionsMarket | PlainMessage<MsgAdminUpdateBinaryOptionsMarket> | undefined): boolean {
    return proto3.util.equals(MsgAdminUpdateBinaryOptionsMarket, a, b);
  }
}

/**
 * MsgAdminUpdateBinaryOptionsMarketResponse is the response for
 * AdminUpdateBinaryOptionsMarket rpc method
 *
 * @generated from message injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarketResponse
 */
export class MsgAdminUpdateBinaryOptionsMarketResponse extends Message<MsgAdminUpdateBinaryOptionsMarketResponse> {
  constructor(data?: PartialMessage<MsgAdminUpdateBinaryOptionsMarketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAdminUpdateBinaryOptionsMarketResponse {
    return new MsgAdminUpdateBinaryOptionsMarketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAdminUpdateBinaryOptionsMarketResponse {
    return new MsgAdminUpdateBinaryOptionsMarketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAdminUpdateBinaryOptionsMarketResponse {
    return new MsgAdminUpdateBinaryOptionsMarketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAdminUpdateBinaryOptionsMarketResponse | PlainMessage<MsgAdminUpdateBinaryOptionsMarketResponse> | undefined, b: MsgAdminUpdateBinaryOptionsMarketResponse | PlainMessage<MsgAdminUpdateBinaryOptionsMarketResponse> | undefined): boolean {
    return proto3.util.equals(MsgAdminUpdateBinaryOptionsMarketResponse, a, b);
  }
}

/**
 * MsgAuthorizeStakeGrants grants stakes to grantees.
 *
 * @generated from message injective.exchange.v1beta1.MsgAuthorizeStakeGrants
 */
export class MsgAuthorizeStakeGrants extends Message<MsgAuthorizeStakeGrants> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated injective.exchange.v1beta1.GrantAuthorization grants = 2;
   */
  grants: GrantAuthorization[] = [];

  constructor(data?: PartialMessage<MsgAuthorizeStakeGrants>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgAuthorizeStakeGrants";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grants", kind: "message", T: GrantAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAuthorizeStakeGrants {
    return new MsgAuthorizeStakeGrants().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAuthorizeStakeGrants {
    return new MsgAuthorizeStakeGrants().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAuthorizeStakeGrants {
    return new MsgAuthorizeStakeGrants().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAuthorizeStakeGrants | PlainMessage<MsgAuthorizeStakeGrants> | undefined, b: MsgAuthorizeStakeGrants | PlainMessage<MsgAuthorizeStakeGrants> | undefined): boolean {
    return proto3.util.equals(MsgAuthorizeStakeGrants, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.MsgAuthorizeStakeGrantsResponse
 */
export class MsgAuthorizeStakeGrantsResponse extends Message<MsgAuthorizeStakeGrantsResponse> {
  constructor(data?: PartialMessage<MsgAuthorizeStakeGrantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgAuthorizeStakeGrantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAuthorizeStakeGrantsResponse {
    return new MsgAuthorizeStakeGrantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAuthorizeStakeGrantsResponse {
    return new MsgAuthorizeStakeGrantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAuthorizeStakeGrantsResponse {
    return new MsgAuthorizeStakeGrantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAuthorizeStakeGrantsResponse | PlainMessage<MsgAuthorizeStakeGrantsResponse> | undefined, b: MsgAuthorizeStakeGrantsResponse | PlainMessage<MsgAuthorizeStakeGrantsResponse> | undefined): boolean {
    return proto3.util.equals(MsgAuthorizeStakeGrantsResponse, a, b);
  }
}

/**
 * MsgActivateStakeGrant allows a grantee to activate a stake grant.
 *
 * @generated from message injective.exchange.v1beta1.MsgActivateStakeGrant
 */
export class MsgActivateStakeGrant extends Message<MsgActivateStakeGrant> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string granter = 2;
   */
  granter = "";

  constructor(data?: PartialMessage<MsgActivateStakeGrant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgActivateStakeGrant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "granter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgActivateStakeGrant {
    return new MsgActivateStakeGrant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgActivateStakeGrant {
    return new MsgActivateStakeGrant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgActivateStakeGrant {
    return new MsgActivateStakeGrant().fromJsonString(jsonString, options);
  }

  static equals(a: MsgActivateStakeGrant | PlainMessage<MsgActivateStakeGrant> | undefined, b: MsgActivateStakeGrant | PlainMessage<MsgActivateStakeGrant> | undefined): boolean {
    return proto3.util.equals(MsgActivateStakeGrant, a, b);
  }
}

/**
 * @generated from message injective.exchange.v1beta1.MsgActivateStakeGrantResponse
 */
export class MsgActivateStakeGrantResponse extends Message<MsgActivateStakeGrantResponse> {
  constructor(data?: PartialMessage<MsgActivateStakeGrantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v1beta1.MsgActivateStakeGrantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgActivateStakeGrantResponse {
    return new MsgActivateStakeGrantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgActivateStakeGrantResponse {
    return new MsgActivateStakeGrantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgActivateStakeGrantResponse {
    return new MsgActivateStakeGrantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgActivateStakeGrantResponse | PlainMessage<MsgActivateStakeGrantResponse> | undefined, b: MsgActivateStakeGrantResponse | PlainMessage<MsgActivateStakeGrantResponse> | undefined): boolean {
    return proto3.util.equals(MsgActivateStakeGrantResponse, a, b);
  }
}

