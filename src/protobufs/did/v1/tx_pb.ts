// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file did/v1/tx.proto (package did.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";

/**
 * MsgRegisterController is the message type for the InitializeController RPC.
 *
 * @generated from message did.v1.MsgRegisterController
 */
export class MsgRegisterController extends Message<MsgRegisterController> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Assertions is the list of assertions to initialize the controller with.
   *
   * @generated from field: repeated bytes assertions = 2;
   */
  assertions: Uint8Array[] = [];

  /**
   * Keyshares is the list of keyshares to initialize the controller with.
   *
   * @generated from field: repeated bytes keyshares = 3;
   */
  keyshares: Uint8Array[] = [];

  /**
   * Verifications is the list of verifications to initialize the controller
   * with.
   *
   * @generated from field: repeated bytes verifications = 4;
   */
  verifications: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgRegisterController>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgRegisterController";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "assertions", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "keyshares", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 4, name: "verifications", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterController {
    return new MsgRegisterController().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterController {
    return new MsgRegisterController().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterController {
    return new MsgRegisterController().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterController | PlainMessage<MsgRegisterController> | undefined, b: MsgRegisterController | PlainMessage<MsgRegisterController> | undefined): boolean {
    return proto3.util.equals(MsgRegisterController, a, b);
  }
}

/**
 * MsgRegisterControllerResponse is the response type for the
 * InitializeController RPC.
 *
 * @generated from message did.v1.MsgRegisterControllerResponse
 */
export class MsgRegisterControllerResponse extends Message<MsgRegisterControllerResponse> {
  /**
   * Success returns true if the specified cid is valid and not already
   * encrypted.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Controller is the address of the initialized controller.
   *
   * @generated from field: string controller = 2;
   */
  controller = "";

  /**
   * Accounts are a Address Map and Supported coin Denoms for the controller
   *
   * @generated from field: map<string, string> accounts = 3;
   */
  accounts: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MsgRegisterControllerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgRegisterControllerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "accounts", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterControllerResponse {
    return new MsgRegisterControllerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterControllerResponse {
    return new MsgRegisterControllerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterControllerResponse {
    return new MsgRegisterControllerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterControllerResponse | PlainMessage<MsgRegisterControllerResponse> | undefined, b: MsgRegisterControllerResponse | PlainMessage<MsgRegisterControllerResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterControllerResponse, a, b);
  }
}

/**
 * MsgExecuteTx is the message type for the ExecuteTx RPC.
 *
 * @generated from message did.v1.MsgExecuteTx
 */
export class MsgExecuteTx extends Message<MsgExecuteTx> {
  /**
   * Controller is the address of the controller to authenticate.
   *
   * @generated from field: string controller = 1;
   */
  controller = "";

  /**
   * Messages is the list of messages to execute.
   *
   * @generated from field: map<string, bytes> messages = 2;
   */
  messages: { [key: string]: Uint8Array } = {};

  /**
   * MacaroonToken is the macaroon token to authenticate the operation.
   *
   * @generated from field: string macaroon_token = 3;
   */
  macaroonToken = "";

  constructor(data?: PartialMessage<MsgExecuteTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgExecuteTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 3, name: "macaroon_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteTx {
    return new MsgExecuteTx().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteTx | PlainMessage<MsgExecuteTx> | undefined, b: MsgExecuteTx | PlainMessage<MsgExecuteTx> | undefined): boolean {
    return proto3.util.equals(MsgExecuteTx, a, b);
  }
}

/**
 * MsgExecuteTxResponse is the response type for the ExecuteTx RPC.
 *
 * @generated from message did.v1.MsgExecuteTxResponse
 */
export class MsgExecuteTxResponse extends Message<MsgExecuteTxResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string tx_hash = 2;
   */
  txHash = "";

  constructor(data?: PartialMessage<MsgExecuteTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgExecuteTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteTxResponse {
    return new MsgExecuteTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteTxResponse | PlainMessage<MsgExecuteTxResponse> | undefined, b: MsgExecuteTxResponse | PlainMessage<MsgExecuteTxResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteTxResponse, a, b);
  }
}

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message did.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the parameters to update.
   *
   * @generated from field: did.v1.Params params = 2;
   */
  params?: Params;

  /**
   * token is the macron token to authenticate the operation.
   *
   * @generated from field: string token = 3;
   */
  token = "";

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message did.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "did.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

