// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dymensionxyz/dymension/txfees/v1beta1/genesis.proto (package dymensionxyz.dymension.txfees.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { FeeToken } from "./feetoken_pb.js";

/**
 * GenesisState defines the txfees module's genesis state.
 *
 * @generated from message dymensionxyz.dymension.txfees.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params are all the parameters of the module
   *
   * @generated from field: dymensionxyz.dymension.txfees.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: string basedenom = 2;
   */
  basedenom = "";

  /**
   * @generated from field: repeated dymensionxyz.dymension.txfees.v1beta1.FeeToken feetokens = 3;
   */
  feetokens: FeeToken[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dymensionxyz.dymension.txfees.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "basedenom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feetokens", kind: "message", T: FeeToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params holds parameters for the incentives module
 *
 * @generated from message dymensionxyz.dymension.txfees.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * epoch_identifier is what epoch type swap and burn will be triggered by
   * (day, week, etc.)
   *
   * @generated from field: string epoch_identifier = 1;
   */
  epochIdentifier = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dymensionxyz.dymension.txfees.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

