// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dymensionxyz/dymension/gamm/v1beta1/genesis.proto (package dymensionxyz.dymension.gamm.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * GenesisState defines the gamm module's genesis state.
 *
 * @generated from message dymensionxyz.dymension.gamm.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  /**
   * will be renamed to next_pool_id in an upcoming version
   *
   * @generated from field: uint64 next_pool_number = 2;
   */
  nextPoolNumber = protoInt64.zero;

  /**
   * @generated from field: dymensionxyz.dymension.gamm.v1beta1.Params params = 3;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dymensionxyz.dymension.gamm.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
    { no: 2, name: "next_pool_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * @generated from message dymensionxyz.dymension.gamm.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin pool_creation_fee = 1;
   */
  poolCreationFee: Coin[] = [];

  /**
   * @generated from field: bool enable_global_pool_fees = 2;
   */
  enableGlobalPoolFees = false;

  /**
   * @generated from field: dymensionxyz.dymension.gamm.v1beta1.GlobalFees global_fees = 3;
   */
  globalFees?: GlobalFees;

  /**
   * @generated from field: string taker_fee = 4;
   */
  takerFee = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dymensionxyz.dymension.gamm.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_creation_fee", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "enable_global_pool_fees", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "global_fees", kind: "message", T: GlobalFees },
    { no: 4, name: "taker_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message dymensionxyz.dymension.gamm.v1beta1.GlobalFees
 */
export class GlobalFees extends Message<GlobalFees> {
  /**
   * @generated from field: string swap_fee = 1;
   */
  swapFee = "";

  /**
   * @generated from field: string exit_fee = 2;
   */
  exitFee = "";

  constructor(data?: PartialMessage<GlobalFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dymensionxyz.dymension.gamm.v1beta1.GlobalFees";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exit_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GlobalFees {
    return new GlobalFees().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GlobalFees {
    return new GlobalFees().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GlobalFees {
    return new GlobalFees().fromJsonString(jsonString, options);
  }

  static equals(a: GlobalFees | PlainMessage<GlobalFees> | undefined, b: GlobalFees | PlainMessage<GlobalFees> | undefined): boolean {
    return proto3.util.equals(GlobalFees, a, b);
  }
}

